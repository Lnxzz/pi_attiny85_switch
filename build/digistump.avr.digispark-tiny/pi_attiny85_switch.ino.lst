
C:\Users\Eelco\AppData\Local\Temp\arduino\sketches\3F07F8F8A79A5A92E43547D61FDC8C6B/pi_attiny85_switch.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	61 c0       	rjmp	.+194    	; 0xc4 <__dtors_end>
       2:	85 c0       	rjmp	.+266    	; 0x10e <__bad_interrupt>
       4:	24 c5       	rjmp	.+2632   	; 0xa4e <__vector_2>
       6:	83 c0       	rjmp	.+262    	; 0x10e <__bad_interrupt>
       8:	d8 c4       	rjmp	.+2480   	; 0x9ba <__vector_4>
       a:	81 c0       	rjmp	.+258    	; 0x10e <__bad_interrupt>
       c:	80 c0       	rjmp	.+256    	; 0x10e <__bad_interrupt>
       e:	7f c0       	rjmp	.+254    	; 0x10e <__bad_interrupt>
      10:	7e c0       	rjmp	.+252    	; 0x10e <__bad_interrupt>
      12:	7d c0       	rjmp	.+250    	; 0x10e <__bad_interrupt>
      14:	7c c0       	rjmp	.+248    	; 0x10e <__bad_interrupt>
      16:	7b c0       	rjmp	.+246    	; 0x10e <__bad_interrupt>
      18:	7a c0       	rjmp	.+244    	; 0x10e <__bad_interrupt>
      1a:	79 c0       	rjmp	.+242    	; 0x10e <__bad_interrupt>
      1c:	78 c0       	rjmp	.+240    	; 0x10e <__bad_interrupt>

0000001e <__trampolines_end>:
__trampolines_start():
      1e:	00 c2       	rjmp	.+1024   	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
      20:	01 00       	.word	0x0001	; ????
      22:	00 00       	nop
      24:	0e 00       	.word	0x000e	; ????
      26:	0e 00       	.word	0x000e	; ????
      28:	0c 00       	.word	0x000c	; ????
      2a:	00 e1       	ldi	r16, 0x10	; 16
      2c:	00 00       	nop
      2e:	05 00       	.word	0x0005	; ????
      30:	22 00       	.word	0x0022	; ????
      32:	22 00       	.word	0x0022	; ????
      34:	20 00       	.word	0x0020	; ????
      36:	00 96       	adiw	r24, 0x00	; 0
      38:	00 00       	nop
      3a:	0f 00       	.word	0x000f	; ????
      3c:	36 00       	.word	0x0036	; ????
      3e:	36 00       	.word	0x0036	; ????
      40:	34 00       	.word	0x0034	; ????
      42:	12 7a       	andi	r17, 0xA2	; 162
      44:	00 00       	nop
      46:	17 00       	.word	0x0017	; ????
      48:	43 00       	.word	0x0043	; ????
      4a:	43 00       	.word	0x0043	; ????
      4c:	41 00       	.word	0x0041	; ????
      4e:	80 70       	andi	r24, 0x00	; 0
      50:	00 00       	nop
      52:	1a 00       	.word	0x001a	; ????
      54:	4a 00       	.word	0x004a	; ????
      56:	4a 00       	.word	0x004a	; ????
      58:	48 00       	.word	0x0048	; ????
      5a:	00 4b       	sbci	r16, 0xB0	; 176
      5c:	00 00       	nop
      5e:	2c 00       	.word	0x002c	; ????
      60:	71 00       	.word	0x0071	; ????
      62:	71 00       	.word	0x0071	; ????
      64:	70 00       	.word	0x0070	; ????
      66:	40 38       	cpi	r20, 0x80	; 128
      68:	00 00       	nop
      6a:	4a 00       	.word	0x004a	; ????
      6c:	9c 00       	.word	0x009c	; ????
      6e:	99 00       	.word	0x0099	; ????
      70:	99 00       	.word	0x0099	; ????
      72:	80 25       	eor	r24, r0
      74:	00 00       	nop
      76:	72 00       	.word	0x0072	; ????
      78:	ea 00       	.word	0x00ea	; ????
      7a:	ea 00       	.word	0x00ea	; ????
      7c:	e9 00       	.word	0x00e9	; ????
      7e:	c0 12       	cpse	r12, r16
      80:	00 00       	nop
      82:	e9 00       	.word	0x00e9	; ????
      84:	da 01       	movw	r26, r20
      86:	da 01       	movw	r26, r20
      88:	d7 01       	movw	r26, r14
      8a:	60 09       	sbc	r22, r0
      8c:	00 00       	nop
      8e:	d7 01       	movw	r26, r14
      90:	ac 03       	fmulsu	r18, r20
      92:	ac 03       	fmulsu	r18, r20
      94:	b1 03       	fmuls	r19, r17
      96:	b0 04       	cpc	r11, r0
      98:	00 00       	nop
      9a:	b3 03       	fmuls	r19, r19
      9c:	6e 07       	cpc	r22, r30
      9e:	6e 07       	cpc	r22, r30
      a0:	67 07       	cpc	r22, r23
      a2:	2c 01       	movw	r4, r24
      a4:	00 00       	nop
      a6:	dc 0e       	add	r13, r28
      a8:	c1 1d       	adc	r28, r1
      aa:	c1 1d       	adc	r28, r1
      ac:	be 1d       	adc	r27, r14

000000ae <port_to_mode_PGM>:
      ae:	00 37                                               .7

000000b0 <port_to_output_PGM>:
      b0:	00 38                                               .8

000000b2 <port_to_input_PGM>:
      b2:	00 36                                               .6

000000b4 <digital_pin_to_port_PGM>:
      b4:	01 01 01 01 01 01                                   ......

000000ba <digital_pin_to_bit_mask_PGM>:
      ba:	01 02 04 08 10 20                                   ..... 

000000c0 <__ctors_start>:
__ctors_start():
      c0:	a1 09       	sbc	r26, r1

000000c2 <__ctors_end>:
__dtors_start():
      c2:	3d 0a       	sbc	r3, r29

000000c4 <__dtors_end>:
__dtors_end():
      c4:	11 24       	eor	r1, r1
      c6:	1f be       	out	0x3f, r1	; 63
      c8:	cf e5       	ldi	r28, 0x5F	; 95
      ca:	d2 e0       	ldi	r29, 0x02	; 2
      cc:	de bf       	out	0x3e, r29	; 62
      ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      d0:	21 e0       	ldi	r18, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      d2:	ae e4       	ldi	r26, 0x4E	; 78
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      d4:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      da:	af 3f       	cpi	r26, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      dc:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
      de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>

000000e0 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      e0:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      e2:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      e4:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      e6:	e2 ec       	ldi	r30, 0xC2	; 194
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      e8:	f7 e1       	ldi	r31, 0x17	; 23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      ec:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      ee:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      f0:	ae 34       	cpi	r26, 0x4E	; 78
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      f2:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0xc>

000000f6 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
      f6:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
      f8:	c1 e6       	ldi	r28, 0x61	; 97
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
      fa:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
      fc:	03 c0       	rjmp	.+6      	; 0x104 <__do_global_ctors+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
      fe:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     100:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     102:	4d db       	rcall	.-2406   	; 0xfffff79e <__eeprom_end+0xff7ef79e>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     104:	c0 36       	cpi	r28, 0x60	; 96
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     106:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     108:	d1 f7       	brne	.-12     	; 0xfe <__do_global_ctors+0x8>
     10a:	e6 d4       	rcall	.+2508   	; 0xad8 <main>
     10c:	4e cb       	rjmp	.-2404   	; 0xfffff7aa <__eeprom_end+0xff7ef7aa>

0000010e <__bad_interrupt>:
__vector_1():
     10e:	78 cf       	rjmp	.-272    	; 0x0 <__vectors>

00000110 <SoftSerial::end() [clone .constprop.32]>:
end():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:461
  listen();
}

void SoftSerial::end()
{
  if (digitalPinToPCMSK(_receivePin))
     110:	20 91 ef 01 	lds	r18, 0x01EF	; 0x8001ef <swserial+0x4>
     114:	26 30       	cpi	r18, 0x06	; 6
     116:	50 f4       	brcc	.+20     	; 0x12c <SoftSerial::end() [clone .constprop.32]+0x1c>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:462
    *digitalPinToPCMSK(_receivePin) &= ~_BV(digitalPinToPCMSKbit(_receivePin));
     118:	35 b3       	in	r19, 0x15	; 21
     11a:	81 e0       	ldi	r24, 0x01	; 1
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	01 c0       	rjmp	.+2      	; 0x122 <SoftSerial::end() [clone .constprop.32]+0x12>
     120:	88 0f       	add	r24, r24
     122:	2a 95       	dec	r18
     124:	ea f7       	brpl	.-6      	; 0x120 <SoftSerial::end() [clone .constprop.32]+0x10>
     126:	80 95       	com	r24
     128:	83 23       	and	r24, r19
     12a:	85 bb       	out	0x15, r24	; 21
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:463
}
     12c:	08 95       	ret

0000012e <TM1637Display::bitDelay() [clone .constprop.17]>:
bitDelay():
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:182
    setSegments(digits, length, pos);
}

void TM1637Display::bitDelay()
{
	delayMicroseconds(m_bitDelay);
     12e:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <display+0x3>
     132:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <display+0x4>
delayMicroseconds():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring.c:213
  // modified by Bluebie in 2013 for Digispark project
  // #include <stdint.h>
  // #include <avr/io.h>
  
  void delayMicroseconds(uint16_t usec) {
		asm volatile(
     136:	02 97       	sbiw	r24, 0x02	; 2
     138:	38 f0       	brcs	.+14     	; 0x148 <L_32_end>
     13a:	31 f0       	breq	.+12     	; 0x148 <L_32_end>
     13c:	88 0f       	add	r24, r24
     13e:	99 1f       	adc	r25, r25
     140:	88 0f       	add	r24, r24
     142:	99 1f       	adc	r25, r25

00000144 <L_32_loop>:
     144:	01 97       	sbiw	r24, 0x01	; 1
     146:	f1 f7       	brne	.-4      	; 0x144 <L_32_loop>

00000148 <L_32_end>:
bitDelay():
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:183
}
     148:	08 95       	ret

0000014a <digitalWrite>:
digitalWrite():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:117

}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t bit = digitalPinToBitMask(pin);
     14a:	28 2f       	mov	r18, r24
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	f9 01       	movw	r30, r18
     150:	e6 54       	subi	r30, 0x46	; 70
     152:	ff 4f       	sbci	r31, 0xFF	; 255
     154:	94 91       	lpm	r25, Z
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:118
	uint8_t port = digitalPinToPort(pin);
     156:	f9 01       	movw	r30, r18
     158:	ec 54       	subi	r30, 0x4C	; 76
     15a:	ff 4f       	sbci	r31, 0xFF	; 255
     15c:	e4 91       	lpm	r30, Z
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:121
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     15e:	ee 23       	and	r30, r30
     160:	a1 f0       	breq	.+40     	; 0x18a <digitalWrite+0x40>
turnOffPWM():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:75
// each digitalread or write.
//
__attribute__((always_inline)) static inline void turnOffPWM( uint8_t pin )
{
  #if CORE_PWM_COUNT >= 1
    if ( pin == CORE_PWM0_PIN )
     162:	81 11       	cpse	r24, r1
     164:	13 c0       	rjmp	.+38     	; 0x18c <digitalWrite+0x42>
Timer0_SetCompareOutputModeA():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/core_timers.h:787
}
timer0_com_t;

__attribute__((always_inline)) static inline void Timer0_SetCompareOutputModeA( timer0_com_t com )
{
  TCCR0A = (TCCR0A & ~MASK2(COM0A1,COM0A0)) | (com << COM0A0);
     166:	8a b5       	in	r24, 0x2a	; 42
     168:	8f 73       	andi	r24, 0x3F	; 63
Timer0_SetCompareOutputModeB():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/core_timers.h:792
}

__attribute__((always_inline)) static inline void Timer0_SetCompareOutputModeB( timer0_com_t com )
{
  TCCR0A = (TCCR0A & ~MASK2(COM0B1,COM0B0)) | (com << COM0B0);
     16a:	8a bd       	out	0x2a, r24	; 42
digitalWrite():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:127

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
  turnOffPWM( pin );

	out = portOutputRegister(port);
     16c:	f0 e0       	ldi	r31, 0x00	; 0
     16e:	e0 55       	subi	r30, 0x50	; 80
     170:	ff 4f       	sbci	r31, 0xFF	; 255
     172:	a4 91       	lpm	r26, Z
     174:	b0 e0       	ldi	r27, 0x00	; 0
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:130

	if (val == LOW) {
		uint8_t oldSREG = SREG;
     176:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:129
	// before doing a digital write.
  turnOffPWM( pin );

	out = portOutputRegister(port);

	if (val == LOW) {
     178:	61 11       	cpse	r22, r1
     17a:	13 c0       	rjmp	.+38     	; 0x1a2 <digitalWrite+0x58>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:131
		uint8_t oldSREG = SREG;
    cli();
     17c:	f8 94       	cli
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:132
		*out &= ~bit;
     17e:	2c 91       	ld	r18, X
     180:	e9 2f       	mov	r30, r25
     182:	e0 95       	com	r30
     184:	e2 23       	and	r30, r18
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:137
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
    cli();
		*out |= bit;
     186:	ec 93       	st	X, r30
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:138
		SREG = oldSREG;
     188:	8f bf       	out	0x3f, r24	; 63
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:140
	}
}
     18a:	08 95       	ret
turnOffPWM():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:83
    }
    else
  #endif

  #if CORE_PWM_COUNT >= 2
    if ( pin == CORE_PWM1_PIN )
     18c:	81 30       	cpi	r24, 0x01	; 1
     18e:	19 f4       	brne	.+6      	; 0x196 <digitalWrite+0x4c>
Timer0_SetCompareOutputModeB():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/core_timers.h:792
     190:	8a b5       	in	r24, 0x2a	; 42
     192:	8f 7c       	andi	r24, 0xCF	; 207
     194:	ea cf       	rjmp	.-44     	; 0x16a <digitalWrite+0x20>
turnOffPWM():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:91
    }
    else
  #endif

  #if CORE_PWM_COUNT >= 3
    if ( pin == CORE_PWM2_PIN )
     196:	84 30       	cpi	r24, 0x04	; 4
     198:	49 f7       	brne	.-46     	; 0x16c <digitalWrite+0x22>
Timer1_SetCompareOutputModeB():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/core_timers.h:985
  TCCR1 = (TCCR1 & ~MASK2(COM1A1,COM1A0)) | (com << COM1A0);
}

__attribute__((always_inline)) static inline void Timer1_SetCompareOutputModeB( timer1_com_t com )
{
  GTCCR = (GTCCR & ~MASK2(COM1B1,COM1B0)) | (com << COM1B0);
     19a:	8c b5       	in	r24, 0x2c	; 44
     19c:	8f 7c       	andi	r24, 0xCF	; 207
     19e:	8c bd       	out	0x2c, r24	; 44
     1a0:	e5 cf       	rjmp	.-54     	; 0x16c <digitalWrite+0x22>
digitalWrite():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:136
    cli();
		*out &= ~bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
    cli();
     1a2:	f8 94       	cli
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:137
		*out |= bit;
     1a4:	ec 91       	ld	r30, X
     1a6:	e9 2b       	or	r30, r25
     1a8:	ee cf       	rjmp	.-36     	; 0x186 <digitalWrite+0x3c>

000001aa <pinMode>:
pinMode():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:36
#include "core_timers.h"
#include "PwmTimer.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	fc 01       	movw	r30, r24
     1ae:	e6 54       	subi	r30, 0x46	; 70
     1b0:	ff 4f       	sbci	r31, 0xFF	; 255
     1b2:	24 91       	lpm	r18, Z
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:37
	uint8_t port = digitalPinToPort(pin);
     1b4:	8c 54       	subi	r24, 0x4C	; 76
     1b6:	9f 4f       	sbci	r25, 0xFF	; 255
     1b8:	fc 01       	movw	r30, r24
     1ba:	84 91       	lpm	r24, Z
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:40
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     1bc:	88 23       	and	r24, r24
     1be:	a1 f0       	breq	.+40     	; 0x1e8 <pinMode+0x3e>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:43

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	fc 01       	movw	r30, r24
     1c4:	e2 55       	subi	r30, 0x52	; 82
     1c6:	ff 4f       	sbci	r31, 0xFF	; 255
     1c8:	a4 91       	lpm	r26, Z
     1ca:	b0 e0       	ldi	r27, 0x00	; 0
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:44
	out = portOutputRegister(port);
     1cc:	80 55       	subi	r24, 0x50	; 80
     1ce:	9f 4f       	sbci	r25, 0xFF	; 255
     1d0:	fc 01       	movw	r30, r24
     1d2:	84 91       	lpm	r24, Z
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:47

	if (mode == INPUT) { 
		uint8_t oldSREG = SREG;
     1d4:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:46

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
	out = portOutputRegister(port);

	if (mode == INPUT) { 
     1d6:	61 11       	cpse	r22, r1
     1d8:	08 c0       	rjmp	.+16     	; 0x1ea <pinMode+0x40>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:48
		uint8_t oldSREG = SREG;
		cli();
     1da:	f8 94       	cli
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:49
		*reg &= ~bit;
     1dc:	9c 91       	ld	r25, X
     1de:	e2 2f       	mov	r30, r18
     1e0:	e0 95       	com	r30
     1e2:	e9 23       	and	r30, r25
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:60
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
		cli();
		*reg |= bit;
     1e4:	ec 93       	st	X, r30
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:61
		SREG = oldSREG;
     1e6:	8f bf       	out	0x3f, r24	; 63
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:63
	}
}
     1e8:	08 95       	ret
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:59
		*reg &= ~bit;
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
		cli();
     1ea:	f8 94       	cli
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:60
		*reg |= bit;
     1ec:	ec 91       	ld	r30, X
     1ee:	e2 2b       	or	r30, r18
     1f0:	f9 cf       	rjmp	.-14     	; 0x1e4 <pinMode+0x3a>

000001f2 <TM1637Display::stop() [clone .constprop.16]>:
stop():
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:191
{
  pinMode(m_pinDIO, OUTPUT);
  bitDelay();
}

void TM1637Display::stop()
     1f2:	cf 93       	push	r28
     1f4:	df 93       	push	r29
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:193
{
	pinMode(m_pinDIO, OUTPUT);
     1f6:	c6 ee       	ldi	r28, 0xE6	; 230
     1f8:	d1 e0       	ldi	r29, 0x01	; 1
     1fa:	61 e0       	ldi	r22, 0x01	; 1
     1fc:	89 81       	ldd	r24, Y+1	; 0x01
     1fe:	d5 df       	rcall	.-86     	; 0x1aa <pinMode>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:194
	bitDelay();
     200:	96 df       	rcall	.-212    	; 0x12e <TM1637Display::bitDelay() [clone .constprop.17]>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:195
	pinMode(m_pinClk, INPUT);
     202:	60 e0       	ldi	r22, 0x00	; 0
     204:	88 81       	ld	r24, Y
     206:	d1 df       	rcall	.-94     	; 0x1aa <pinMode>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:196
	bitDelay();
     208:	92 df       	rcall	.-220    	; 0x12e <TM1637Display::bitDelay() [clone .constprop.17]>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:197
	pinMode(m_pinDIO, INPUT);
     20a:	60 e0       	ldi	r22, 0x00	; 0
     20c:	89 81       	ldd	r24, Y+1	; 0x01
     20e:	cd df       	rcall	.-102    	; 0x1aa <pinMode>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:199
	bitDelay();
}
     210:	df 91       	pop	r29
     212:	cf 91       	pop	r28
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:198
	pinMode(m_pinDIO, OUTPUT);
	bitDelay();
	pinMode(m_pinClk, INPUT);
	bitDelay();
	pinMode(m_pinDIO, INPUT);
	bitDelay();
     214:	8c cf       	rjmp	.-232    	; 0x12e <TM1637Display::bitDelay() [clone .constprop.17]>

00000216 <TM1637Display::writeByte(unsigned char) [clone .constprop.15]>:
writeByte():
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:201
}

bool TM1637Display::writeByte(uint8_t b)
     216:	0f 93       	push	r16
     218:	1f 93       	push	r17
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	d8 2f       	mov	r29, r24
     220:	c8 e0       	ldi	r28, 0x08	; 8
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:208
  uint8_t data = b;

  // 8 Data Bits
  for(uint8_t i = 0; i < 8; i++) {
    // CLK low
    pinMode(m_pinClk, OUTPUT);
     222:	61 e0       	ldi	r22, 0x01	; 1
     224:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <display>
     228:	c0 df       	rcall	.-128    	; 0x1aa <pinMode>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:209
    bitDelay();
     22a:	81 df       	rcall	.-254    	; 0x12e <TM1637Display::bitDelay() [clone .constprop.17]>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:212

	// Set data bit
    if (data & 0x01)
     22c:	0d 2f       	mov	r16, r29
     22e:	10 e0       	ldi	r17, 0x00	; 0
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:213
      pinMode(m_pinDIO, INPUT);
     230:	60 e0       	ldi	r22, 0x00	; 0
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:212
    // CLK low
    pinMode(m_pinClk, OUTPUT);
    bitDelay();

	// Set data bit
    if (data & 0x01)
     232:	d0 ff       	sbrs	r29, 0
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:215
      pinMode(m_pinDIO, INPUT);
    else
      pinMode(m_pinDIO, OUTPUT);
     234:	61 e0       	ldi	r22, 0x01	; 1
     236:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <display+0x1>
     23a:	b7 df       	rcall	.-146    	; 0x1aa <pinMode>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:217

    bitDelay();
     23c:	78 df       	rcall	.-272    	; 0x12e <TM1637Display::bitDelay() [clone .constprop.17]>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:220

	// CLK high
    pinMode(m_pinClk, INPUT);
     23e:	60 e0       	ldi	r22, 0x00	; 0
     240:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <display>
     244:	b2 df       	rcall	.-156    	; 0x1aa <pinMode>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:221
    bitDelay();
     246:	73 df       	rcall	.-282    	; 0x12e <TM1637Display::bitDelay() [clone .constprop.17]>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:222
    data = data >> 1;
     248:	15 95       	asr	r17
     24a:	07 95       	ror	r16
     24c:	d0 2f       	mov	r29, r16
     24e:	c1 50       	subi	r28, 0x01	; 1
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:206
bool TM1637Display::writeByte(uint8_t b)
{
  uint8_t data = b;

  // 8 Data Bits
  for(uint8_t i = 0; i < 8; i++) {
     250:	41 f7       	brne	.-48     	; 0x222 <TM1637Display::writeByte(unsigned char) [clone .constprop.15]+0xc>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:227
    data = data >> 1;
  }

  // Wait for acknowledge
  // CLK to zero
  pinMode(m_pinClk, OUTPUT);
     252:	61 e0       	ldi	r22, 0x01	; 1
     254:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <display>
     258:	a8 df       	rcall	.-176    	; 0x1aa <pinMode>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:228
  pinMode(m_pinDIO, INPUT);
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <display+0x1>
     260:	a4 df       	rcall	.-184    	; 0x1aa <pinMode>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:229
  bitDelay();
     262:	65 df       	rcall	.-310    	; 0x12e <TM1637Display::bitDelay() [clone .constprop.17]>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:232

  // CLK to high
  pinMode(m_pinClk, INPUT);
     264:	60 e0       	ldi	r22, 0x00	; 0
     266:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <display>
     26a:	9f df       	rcall	.-194    	; 0x1aa <pinMode>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:233
  bitDelay();
     26c:	60 df       	rcall	.-320    	; 0x12e <TM1637Display::bitDelay() [clone .constprop.17]>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:234
  uint8_t ack = digitalRead(m_pinDIO);
     26e:	30 91 e7 01 	lds	r19, 0x01E7	; 0x8001e7 <display+0x1>
digitalRead():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:144
	}
}

int digitalRead(uint8_t pin)
{
	uint8_t bit = digitalPinToBitMask(pin);
     272:	83 2f       	mov	r24, r19
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	fc 01       	movw	r30, r24
     278:	e6 54       	subi	r30, 0x46	; 70
     27a:	ff 4f       	sbci	r31, 0xFF	; 255
     27c:	24 91       	lpm	r18, Z
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:145
	uint8_t port = digitalPinToPort(pin);
     27e:	fc 01       	movw	r30, r24
     280:	ec 54       	subi	r30, 0x4C	; 76
     282:	ff 4f       	sbci	r31, 0xFF	; 255
     284:	e4 91       	lpm	r30, Z
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:147

	if (port == NOT_A_PIN) return LOW;
     286:	ee 23       	and	r30, r30
     288:	69 f1       	breq	.+90     	; 0x2e4 <__stack+0x85>
turnOffPWM():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:75
// each digitalread or write.
//
__attribute__((always_inline)) static inline void turnOffPWM( uint8_t pin )
{
  #if CORE_PWM_COUNT >= 1
    if ( pin == CORE_PWM0_PIN )
     28a:	31 11       	cpse	r19, r1
     28c:	20 c0       	rjmp	.+64     	; 0x2ce <__stack+0x6f>
Timer0_SetCompareOutputModeA():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/core_timers.h:787
}
timer0_com_t;

__attribute__((always_inline)) static inline void Timer0_SetCompareOutputModeA( timer0_com_t com )
{
  TCCR0A = (TCCR0A & ~MASK2(COM0A1,COM0A0)) | (com << COM0A0);
     28e:	8a b5       	in	r24, 0x2a	; 42
     290:	8f 73       	andi	r24, 0x3F	; 63
Timer0_SetCompareOutputModeB():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/core_timers.h:792
}

__attribute__((always_inline)) static inline void Timer0_SetCompareOutputModeB( timer0_com_t com )
{
  TCCR0A = (TCCR0A & ~MASK2(COM0B1,COM0B0)) | (com << COM0B0);
     292:	8a bd       	out	0x2a, r24	; 42
digitalRead():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:153

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
  turnOffPWM( pin );

	if (*portInputRegister(port) & bit) return HIGH;
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	ee 54       	subi	r30, 0x4E	; 78
     298:	ff 4f       	sbci	r31, 0xFF	; 255
     29a:	a4 91       	lpm	r26, Z
     29c:	b0 e0       	ldi	r27, 0x00	; 0
     29e:	ec 91       	ld	r30, X
     2a0:	e2 23       	and	r30, r18
     2a2:	c1 e0       	ldi	r28, 0x01	; 1
     2a4:	09 f4       	brne	.+2      	; 0x2a8 <__stack+0x49>
     2a6:	c0 e0       	ldi	r28, 0x00	; 0
writeByte():
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:235
  if (ack == 0)
     2a8:	c1 11       	cpse	r28, r1
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <__stack+0x55>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:236
    pinMode(m_pinDIO, OUTPUT);
     2ac:	61 e0       	ldi	r22, 0x01	; 1
     2ae:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <display+0x1>
     2b2:	7b df       	rcall	.-266    	; 0x1aa <pinMode>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:239


  bitDelay();
     2b4:	3c df       	rcall	.-392    	; 0x12e <TM1637Display::bitDelay() [clone .constprop.17]>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:240
  pinMode(m_pinClk, OUTPUT);
     2b6:	61 e0       	ldi	r22, 0x01	; 1
     2b8:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <display>
     2bc:	76 df       	rcall	.-276    	; 0x1aa <pinMode>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:241
  bitDelay();
     2be:	37 df       	rcall	.-402    	; 0x12e <TM1637Display::bitDelay() [clone .constprop.17]>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:244

  return ack;
}
     2c0:	8c 2f       	mov	r24, r28
     2c2:	81 70       	andi	r24, 0x01	; 1
     2c4:	df 91       	pop	r29
     2c6:	cf 91       	pop	r28
     2c8:	1f 91       	pop	r17
     2ca:	0f 91       	pop	r16
     2cc:	08 95       	ret
turnOffPWM():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:83
    }
    else
  #endif

  #if CORE_PWM_COUNT >= 2
    if ( pin == CORE_PWM1_PIN )
     2ce:	31 30       	cpi	r19, 0x01	; 1
     2d0:	19 f4       	brne	.+6      	; 0x2d8 <__stack+0x79>
Timer0_SetCompareOutputModeB():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/core_timers.h:792
     2d2:	8a b5       	in	r24, 0x2a	; 42
     2d4:	8f 7c       	andi	r24, 0xCF	; 207
     2d6:	dd cf       	rjmp	.-70     	; 0x292 <__stack+0x33>
turnOffPWM():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:91
    }
    else
  #endif

  #if CORE_PWM_COUNT >= 3
    if ( pin == CORE_PWM2_PIN )
     2d8:	34 30       	cpi	r19, 0x04	; 4
     2da:	e1 f6       	brne	.-72     	; 0x294 <__stack+0x35>
Timer1_SetCompareOutputModeB():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/core_timers.h:985
  TCCR1 = (TCCR1 & ~MASK2(COM1A1,COM1A0)) | (com << COM1A0);
}

__attribute__((always_inline)) static inline void Timer1_SetCompareOutputModeB( timer1_com_t com )
{
  GTCCR = (GTCCR & ~MASK2(COM1B1,COM1B0)) | (com << COM1B0);
     2dc:	8c b5       	in	r24, 0x2c	; 44
     2de:	8f 7c       	andi	r24, 0xCF	; 207
     2e0:	8c bd       	out	0x2c, r24	; 44
     2e2:	d8 cf       	rjmp	.-80     	; 0x294 <__stack+0x35>
writeByte():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_digital.c:147
int digitalRead(uint8_t pin)
{
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
     2e4:	c0 e0       	ldi	r28, 0x00	; 0
     2e6:	e2 cf       	rjmp	.-60     	; 0x2ac <__stack+0x4d>

000002e8 <TM1637Display::start() [clone .constprop.14]>:
start():
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:187
	delayMicroseconds(m_bitDelay);
}

void TM1637Display::start()
{
  pinMode(m_pinDIO, OUTPUT);
     2e8:	61 e0       	ldi	r22, 0x01	; 1
     2ea:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <display+0x1>
     2ee:	5d df       	rcall	.-326    	; 0x1aa <pinMode>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:188
  bitDelay();
     2f0:	1e cf       	rjmp	.-452    	; 0x12e <TM1637Display::bitDelay() [clone .constprop.17]>

000002f2 <TM1637Display::setSegments(unsigned char const*, unsigned char, unsigned char) [clone .constprop.13]>:
setSegments():
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:81
void TM1637Display::setBrightness(uint8_t brightness, bool on)
{
	m_brightness = (brightness & 0x7) | (on? 0x08 : 0x00);
}

void TM1637Display::setSegments(const uint8_t segments[], uint8_t length, uint8_t pos)
     2f2:	0f 93       	push	r16
     2f4:	1f 93       	push	r17
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	8c 01       	movw	r16, r24
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:84
{
    // Write COMM1
	start();
     2fc:	f5 df       	rcall	.-22     	; 0x2e8 <TM1637Display::start() [clone .constprop.14]>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:85
	writeByte(TM1637_I2C_COMM1);
     2fe:	80 e4       	ldi	r24, 0x40	; 64
     300:	8a df       	rcall	.-236    	; 0x216 <TM1637Display::writeByte(unsigned char) [clone .constprop.15]>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:86
	stop();
     302:	77 df       	rcall	.-274    	; 0x1f2 <TM1637Display::stop() [clone .constprop.16]>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:89

	// Write COMM2 + first digit address
	start();
     304:	f1 df       	rcall	.-30     	; 0x2e8 <TM1637Display::start() [clone .constprop.14]>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:90
	writeByte(TM1637_I2C_COMM2 + (pos & 0x03));
     306:	80 ec       	ldi	r24, 0xC0	; 192
     308:	86 df       	rcall	.-244    	; 0x216 <TM1637Display::writeByte(unsigned char) [clone .constprop.15]>
     30a:	e8 01       	movw	r28, r16
     30c:	0c 5f       	subi	r16, 0xFC	; 252
     30e:	1f 4f       	sbci	r17, 0xFF	; 255
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:94

	// Write the data bytes
	for (uint8_t k=0; k < length; k++)
	  writeByte(segments[k]);
     310:	89 91       	ld	r24, Y+
     312:	81 df       	rcall	.-254    	; 0x216 <TM1637Display::writeByte(unsigned char) [clone .constprop.15]>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:93
	// Write COMM2 + first digit address
	start();
	writeByte(TM1637_I2C_COMM2 + (pos & 0x03));

	// Write the data bytes
	for (uint8_t k=0; k < length; k++)
     314:	c0 17       	cp	r28, r16
     316:	d1 07       	cpc	r29, r17
     318:	d9 f7       	brne	.-10     	; 0x310 <TM1637Display::setSegments(unsigned char const*, unsigned char, unsigned char) [clone .constprop.13]+0x1e>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:96
	  writeByte(segments[k]);

	stop();
     31a:	6b df       	rcall	.-298    	; 0x1f2 <TM1637Display::stop() [clone .constprop.16]>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:99

	// Write COMM3 + brightness
	start();
     31c:	e5 df       	rcall	.-54     	; 0x2e8 <TM1637Display::start() [clone .constprop.14]>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:100
	writeByte(TM1637_I2C_COMM3 + (m_brightness & 0x0f));
     31e:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <display+0x2>
     322:	8f 70       	andi	r24, 0x0F	; 15
     324:	80 58       	subi	r24, 0x80	; 128
     326:	77 df       	rcall	.-274    	; 0x216 <TM1637Display::writeByte(unsigned char) [clone .constprop.15]>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:102
	stop();
}
     328:	df 91       	pop	r29
     32a:	cf 91       	pop	r28
     32c:	1f 91       	pop	r17
     32e:	0f 91       	pop	r16
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:101
	stop();

	// Write COMM3 + brightness
	start();
	writeByte(TM1637_I2C_COMM3 + (m_brightness & 0x0f));
	stop();
     330:	60 cf       	rjmp	.-320    	; 0x1f2 <TM1637Display::stop() [clone .constprop.16]>

00000332 <TM1637Display::clear() [clone .constprop.12]>:
clear():
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:104
}

void TM1637Display::clear()
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	00 d0       	rcall	.+0      	; 0x338 <TM1637Display::clear() [clone .constprop.12]+0x6>
     338:	00 d0       	rcall	.+0      	; 0x33a <TM1637Display::clear() [clone .constprop.12]+0x8>
     33a:	cd b7       	in	r28, 0x3d	; 61
     33c:	de b7       	in	r29, 0x3e	; 62
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:106
{
    uint8_t data[] = { 0, 0, 0, 0 };
     33e:	19 82       	std	Y+1, r1	; 0x01
     340:	1a 82       	std	Y+2, r1	; 0x02
     342:	1b 82       	std	Y+3, r1	; 0x03
     344:	1c 82       	std	Y+4, r1	; 0x04
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:107
	setSegments(data);
     346:	ce 01       	movw	r24, r28
     348:	01 96       	adiw	r24, 0x01	; 1
     34a:	d3 df       	rcall	.-90     	; 0x2f2 <TM1637Display::setSegments(unsigned char const*, unsigned char, unsigned char) [clone .constprop.13]>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:108
}
     34c:	0f 90       	pop	r0
     34e:	0f 90       	pop	r0
     350:	0f 90       	pop	r0
     352:	0f 90       	pop	r0
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
     358:	08 95       	ret

0000035a <analogRead>:
analogRead():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_analog.c:55
    if ( pin >= CORE_ANALOG_FIRST ) pin -= CORE_ANALOG_FIRST; // allow for channel or pin numbers
  #endif

  // fix? Validate pin?

  ADC_SetVoltageReference( analog_reference );
     35a:	20 91 e5 01 	lds	r18, 0x01E5	; 0x8001e5 <analog_reference>
ADC_SetVoltageReference():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/core_adc.h:226
}
adc_vr_t;

__attribute__((always_inline)) static inline void ADC_SetVoltageReference( adc_vr_t vr )
{
  ADMUX = (ADMUX & ~MASK3(REFS1,REFS0,REFS2)) 
     35e:	97 b1       	in	r25, 0x07	; 7
     360:	9f 72       	andi	r25, 0x2F	; 47
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/core_adc.h:227
      | (((vr & B011) >> 0) << REFS0) 
     362:	32 2f       	mov	r19, r18
     364:	32 95       	swap	r19
     366:	33 0f       	add	r19, r19
     368:	33 0f       	add	r19, r19
     36a:	30 7c       	andi	r19, 0xC0	; 192
     36c:	93 2b       	or	r25, r19
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/core_adc.h:228
      | (((vr & B100) >> 2) << REFS2);
     36e:	22 0f       	add	r18, r18
     370:	22 0f       	add	r18, r18
     372:	20 71       	andi	r18, 0x10	; 16
     374:	92 2b       	or	r25, r18
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/core_adc.h:226
}
adc_vr_t;

__attribute__((always_inline)) static inline void ADC_SetVoltageReference( adc_vr_t vr )
{
  ADMUX = (ADMUX & ~MASK3(REFS1,REFS0,REFS2)) 
     376:	97 b9       	out	0x07, r25	; 7
ADC_SetInputChannel():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/core_adc.h:256
}
adc_ic_t;

__attribute__((always_inline)) static inline void ADC_SetInputChannel( adc_ic_t ic )
{
  ADMUX = (ADMUX & ~MASK4(MUX3,MUX2,MUX1,MUX0)) | (ic << MUX0);
     378:	97 b1       	in	r25, 0x07	; 7
     37a:	90 7f       	andi	r25, 0xF0	; 240
     37c:	89 2b       	or	r24, r25
     37e:	87 b9       	out	0x07, r24	; 7
ADC_StartConversion():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/core_adc.h:261
}

__attribute__((always_inline)) static inline void ADC_StartConversion( void )
{
  ADCSRA |= MASK1( ADSC );
     380:	36 9a       	sbi	0x06, 6	; 6
analogRead():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_analog.c:60
  ADC_SetInputChannel( pin );

  ADC_StartConversion();

  while( ADC_ConversionInProgress() );
     382:	36 99       	sbic	0x06, 6	; 6
     384:	fe cf       	rjmp	.-4      	; 0x382 <analogRead+0x28>
ADC_GetDataRegister():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/core_adc.h:271
  return( (ADCSRA & (1<<ADSC)) != 0 );
}

__attribute__((always_inline)) static inline uint16_t ADC_GetDataRegister( void )
{
  return( ADC );
     386:	84 b1       	in	r24, 0x04	; 4
     388:	95 b1       	in	r25, 0x05	; 5
analogRead():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_analog.c:63

  return( ADC_GetDataRegister() );
}
     38a:	08 95       	ret

0000038c <micros>:
micros():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring.c:138
}

unsigned long micros() 
{
  unsigned long m;
  uint8_t oldSREG = SREG, t;
     38c:	3f b7       	in	r19, 0x3f	; 63
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring.c:140
  
  cli();
     38e:	f8 94       	cli
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring.c:141
  m = millis_timer_overflow_count;
     390:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <millis_timer_overflow_count>
     394:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <millis_timer_overflow_count+0x1>
     398:	a0 91 e3 01 	lds	r26, 0x01E3	; 0x8001e3 <millis_timer_overflow_count+0x2>
     39c:	b0 91 e4 01 	lds	r27, 0x01E4	; 0x8001e4 <millis_timer_overflow_count+0x3>
Timer1_GetCount():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/core_timers.h:1029
  TIMSK |= (1<<TOIE1);
} 

__attribute__((always_inline)) static inline timer1_tcnt_t Timer1_GetCount( void )
{
  return( TCNT1 );
     3a0:	2f b5       	in	r18, 0x2f	; 47
micros():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring.c:144
  t = MillisTimer_GetCount();
  
  if (MillisTimer_IsOverflowSet() && (t < 255))
     3a2:	08 b6       	in	r0, 0x38	; 56
     3a4:	02 fe       	sbrs	r0, 2
     3a6:	05 c0       	rjmp	.+10     	; 0x3b2 <micros+0x26>
     3a8:	2f 3f       	cpi	r18, 0xFF	; 255
     3aa:	19 f0       	breq	.+6      	; 0x3b2 <micros+0x26>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring.c:145
    m++;
     3ac:	01 96       	adiw	r24, 0x01	; 1
     3ae:	a1 1d       	adc	r26, r1
     3b0:	b1 1d       	adc	r27, r1
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring.c:147

  SREG = oldSREG;
     3b2:	3f bf       	out	0x3f, r19	; 63
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring.c:150

#if (MillisTimer_Prescale_Value >= clockCyclesPerMicrosecond())
  return ((m << 8) + t) * (MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
     3b4:	ba 2f       	mov	r27, r26
     3b6:	a9 2f       	mov	r26, r25
     3b8:	98 2f       	mov	r25, r24
     3ba:	88 27       	eor	r24, r24
     3bc:	bc 01       	movw	r22, r24
     3be:	cd 01       	movw	r24, r26
     3c0:	62 0f       	add	r22, r18
     3c2:	71 1d       	adc	r23, r1
     3c4:	81 1d       	adc	r24, r1
     3c6:	91 1d       	adc	r25, r1
     3c8:	42 e0       	ldi	r20, 0x02	; 2
     3ca:	66 0f       	add	r22, r22
     3cc:	77 1f       	adc	r23, r23
     3ce:	88 1f       	adc	r24, r24
     3d0:	99 1f       	adc	r25, r25
     3d2:	4a 95       	dec	r20
     3d4:	d1 f7       	brne	.-12     	; 0x3ca <micros+0x3e>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring.c:154
#else
  return ((m << 8) + t) / (clockCyclesPerMicrosecond() / MillisTimer_Prescale_Value);
#endif
}
     3d6:	08 95       	ret

000003d8 <delay.constprop.9>:
delay():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring.c:156

void delay(unsigned long ms)
     3d8:	cf 92       	push	r12
     3da:	df 92       	push	r13
     3dc:	ef 92       	push	r14
     3de:	ff 92       	push	r15
     3e0:	cf 93       	push	r28
     3e2:	df 93       	push	r29
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring.c:158
{
  uint16_t start = (uint16_t)micros();
     3e4:	d3 df       	rcall	.-90     	; 0x38c <micros>
     3e6:	eb 01       	movw	r28, r22
     3e8:	80 ed       	ldi	r24, 0xD0	; 208
     3ea:	c8 2e       	mov	r12, r24
     3ec:	87 e0       	ldi	r24, 0x07	; 7
     3ee:	d8 2e       	mov	r13, r24
     3f0:	e1 2c       	mov	r14, r1
     3f2:	f1 2c       	mov	r15, r1
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring.c:161

  while (ms > 0) {
    if (((uint16_t)micros() - start) >= 1000) {
     3f4:	cb df       	rcall	.-106    	; 0x38c <micros>
     3f6:	6c 1b       	sub	r22, r28
     3f8:	7d 0b       	sbc	r23, r29
     3fa:	68 3e       	cpi	r22, 0xE8	; 232
     3fc:	73 40       	sbci	r23, 0x03	; 3
     3fe:	d0 f3       	brcs	.-12     	; 0x3f4 <delay.constprop.9+0x1c>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring.c:162
      ms--;
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	c8 1a       	sub	r12, r24
     404:	d1 08       	sbc	r13, r1
     406:	e1 08       	sbc	r14, r1
     408:	f1 08       	sbc	r15, r1
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring.c:163
      start += 1000;
     40a:	c8 51       	subi	r28, 0x18	; 24
     40c:	dc 4f       	sbci	r29, 0xFC	; 252
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring.c:160

void delay(unsigned long ms)
{
  uint16_t start = (uint16_t)micros();

  while (ms > 0) {
     40e:	c1 14       	cp	r12, r1
     410:	d1 04       	cpc	r13, r1
     412:	e1 04       	cpc	r14, r1
     414:	f1 04       	cpc	r15, r1
     416:	71 f7       	brne	.-36     	; 0x3f4 <delay.constprop.9+0x1c>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring.c:166
    if (((uint16_t)micros() - start) >= 1000) {
      ms--;
      start += 1000;
    }
  }
}
     418:	df 91       	pop	r29
     41a:	cf 91       	pop	r28
     41c:	ff 90       	pop	r15
     41e:	ef 90       	pop	r14
     420:	df 90       	pop	r13
     422:	cf 90       	pop	r12
     424:	08 95       	ret

00000426 <Print::write(unsigned char const*, unsigned int)>:
write():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/Print.cpp:34

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     426:	cf 92       	push	r12
     428:	df 92       	push	r13
     42a:	ef 92       	push	r14
     42c:	ff 92       	push	r15
     42e:	0f 93       	push	r16
     430:	1f 93       	push	r17
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	6c 01       	movw	r12, r24
     438:	eb 01       	movw	r28, r22
     43a:	7b 01       	movw	r14, r22
     43c:	e4 0e       	add	r14, r20
     43e:	f5 1e       	adc	r15, r21
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/Print.cpp:35
  size_t n = 0;
     440:	10 e0       	ldi	r17, 0x00	; 0
     442:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/Print.cpp:36
  while (size--) {
     444:	ce 15       	cp	r28, r14
     446:	df 05       	cpc	r29, r15
     448:	61 f0       	breq	.+24     	; 0x462 <Print::write(unsigned char const*, unsigned int)+0x3c>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/Print.cpp:37
    n += write(*buffer++);
     44a:	69 91       	ld	r22, Y+
     44c:	d6 01       	movw	r26, r12
     44e:	ed 91       	ld	r30, X+
     450:	fc 91       	ld	r31, X
     452:	01 90       	ld	r0, Z+
     454:	f0 81       	ld	r31, Z
     456:	e0 2d       	mov	r30, r0
     458:	c6 01       	movw	r24, r12
     45a:	09 95       	icall
     45c:	08 0f       	add	r16, r24
     45e:	19 1f       	adc	r17, r25
     460:	f1 cf       	rjmp	.-30     	; 0x444 <Print::write(unsigned char const*, unsigned int)+0x1e>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/Print.cpp:40
  }
  return n;
}
     462:	c8 01       	movw	r24, r16
     464:	df 91       	pop	r29
     466:	cf 91       	pop	r28
     468:	1f 91       	pop	r17
     46a:	0f 91       	pop	r16
     46c:	ff 90       	pop	r15
     46e:	ef 90       	pop	r14
     470:	df 90       	pop	r13
     472:	cf 90       	pop	r12
     474:	08 95       	ret

00000476 <SoftSerial::tx_pin_write(unsigned char) [clone .part.4]>:
_ZN10SoftSerial12tx_pin_writeEh.part.4():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:317
    "pop r18 \n\t"
    ::);
#endif
}

void SoftSerial::tx_pin_write(uint8_t pin_state)
     476:	dc 01       	movw	r26, r24
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:320
{
  if (pin_state == LOW)
    *_transmitPortRegister &= ~_transmitBitMask;
     478:	19 96       	adiw	r26, 0x09	; 9
     47a:	ed 91       	ld	r30, X+
     47c:	fc 91       	ld	r31, X
     47e:	1a 97       	sbiw	r26, 0x0a	; 10
     480:	90 81       	ld	r25, Z
     482:	18 96       	adiw	r26, 0x08	; 8
     484:	8c 91       	ld	r24, X
     486:	80 95       	com	r24
     488:	89 23       	and	r24, r25
     48a:	80 83       	st	Z, r24
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:323
  else
    *_transmitPortRegister |= _transmitBitMask;
}
     48c:	08 95       	ret

0000048e <SoftSerial::peek()>:
peek():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:553
  SREG = oldSREG;
}

int SoftSerial::peek()
{
  if (!isListening())
     48e:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <SoftSerial::active_object>
     492:	30 91 c5 01 	lds	r19, 0x01C5	; 0x8001c5 <SoftSerial::active_object+0x1>
     496:	28 17       	cp	r18, r24
     498:	39 07       	cpc	r19, r25
     49a:	81 f4       	brne	.+32     	; 0x4bc <SoftSerial::peek()+0x2e>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:557
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     49c:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <SoftSerial::_receive_buffer_head>
     4a0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <SoftSerial::_receive_buffer_tail>
     4a4:	98 17       	cp	r25, r24
     4a6:	51 f0       	breq	.+20     	; 0x4bc <SoftSerial::peek()+0x2e>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:561
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
     4a8:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <SoftSerial::_receive_buffer_head>
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	e8 5a       	subi	r30, 0xA8	; 168
     4b0:	fe 4f       	sbci	r31, 0xFE	; 254
     4b2:	80 81       	ld	r24, Z
     4b4:	08 2e       	mov	r0, r24
     4b6:	00 0c       	add	r0, r0
     4b8:	99 0b       	sbc	r25, r25
     4ba:	08 95       	ret
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:554
}

int SoftSerial::peek()
{
  if (!isListening())
    return -1;
     4bc:	8f ef       	ldi	r24, 0xFF	; 255
     4be:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:562
  if (_receive_buffer_head == _receive_buffer_tail)
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
}
     4c0:	08 95       	ret

000004c2 <SoftSerial::flush()>:
flush():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:542
  return 1;
}

void SoftSerial::flush()
{
  if (!isListening())
     4c2:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <SoftSerial::active_object>
     4c6:	30 91 c5 01 	lds	r19, 0x01C5	; 0x8001c5 <SoftSerial::active_object+0x1>
     4ca:	28 17       	cp	r18, r24
     4cc:	39 07       	cpc	r19, r25
     4ce:	39 f4       	brne	.+14     	; 0x4de <SoftSerial::flush()+0x1c>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:545
    return;

  uint8_t oldSREG = SREG;
     4d0:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:546
  cli();
     4d2:	f8 94       	cli
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:547
  _receive_buffer_head = _receive_buffer_tail = 0;
     4d4:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <SoftSerial::_receive_buffer_tail>
     4d8:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <SoftSerial::_receive_buffer_head>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:548
  SREG = oldSREG;
     4dc:	8f bf       	out	0x3f, r24	; 63
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:549
}
     4de:	08 95       	ret

000004e0 <SoftSerial::available()>:
available():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:484
  return d;
}

int SoftSerial::available()
{
  if (!isListening())
     4e0:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <SoftSerial::active_object>
     4e4:	30 91 c5 01 	lds	r19, 0x01C5	; 0x8001c5 <SoftSerial::active_object+0x1>
     4e8:	28 17       	cp	r18, r24
     4ea:	39 07       	cpc	r19, r25
     4ec:	61 f4       	brne	.+24     	; 0x506 <SoftSerial::available()+0x26>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:487
    return 0;

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
     4ee:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <SoftSerial::_receive_buffer_tail>
     4f2:	20 91 c2 01 	lds	r18, 0x01C2	; 0x8001c2 <SoftSerial::_receive_buffer_head>
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	80 5c       	subi	r24, 0xC0	; 192
     4fa:	9f 4f       	sbci	r25, 0xFF	; 255
     4fc:	82 1b       	sub	r24, r18
     4fe:	91 09       	sbc	r25, r1
     500:	60 e4       	ldi	r22, 0x40	; 64
     502:	70 e0       	ldi	r23, 0x00	; 0
     504:	ff c8       	rjmp	.-3586   	; 0xfffff704 <__eeprom_end+0xff7ef704>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:485
}

int SoftSerial::available()
{
  if (!isListening())
    return 0;
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:488

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}
     50a:	08 95       	ret

0000050c <SoftSerial::read()>:
read():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:469


// Read data from buffer
int SoftSerial::read()
{
  if (!isListening())
     50c:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <SoftSerial::active_object>
     510:	30 91 c5 01 	lds	r19, 0x01C5	; 0x8001c5 <SoftSerial::active_object+0x1>
     514:	28 17       	cp	r18, r24
     516:	39 07       	cpc	r19, r25
     518:	b9 f4       	brne	.+46     	; 0x548 <SoftSerial::read()+0x3c>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:473
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     51a:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <SoftSerial::_receive_buffer_head>
     51e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <SoftSerial::_receive_buffer_tail>
     522:	98 17       	cp	r25, r24
     524:	89 f0       	breq	.+34     	; 0x548 <SoftSerial::read()+0x3c>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:477
    return -1;

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
     526:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <SoftSerial::_receive_buffer_head>
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	e8 5a       	subi	r30, 0xA8	; 168
     52e:	fe 4f       	sbci	r31, 0xFE	; 254
     530:	80 81       	ld	r24, Z
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:478
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
     532:	20 91 c2 01 	lds	r18, 0x01C2	; 0x8001c2 <SoftSerial::_receive_buffer_head>
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	2f 5f       	subi	r18, 0xFF	; 255
     53a:	3f 4f       	sbci	r19, 0xFF	; 255
     53c:	2f 73       	andi	r18, 0x3F	; 63
     53e:	33 27       	eor	r19, r19
     540:	20 93 c2 01 	sts	0x01C2, r18	; 0x8001c2 <SoftSerial::_receive_buffer_head>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:479
  return d;
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	08 95       	ret
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:470

// Read data from buffer
int SoftSerial::read()
{
  if (!isListening())
    return -1;
     548:	8f ef       	ldi	r24, 0xFF	; 255
     54a:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:480

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
  return d;
}
     54c:	08 95       	ret

0000054e <SoftSerial::tunedDelay(unsigned int)>:
tunedDelay():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:213
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
     54e:	20 e0       	ldi	r18, 0x00	; 0
     550:	01 97       	sbiw	r24, 0x01	; 1
     552:	2f ef       	ldi	r18, 0xFF	; 255
     554:	8f 3f       	cpi	r24, 0xFF	; 255
     556:	92 07       	cpc	r25, r18
     558:	d9 f7       	brne	.-10     	; 0x550 <SoftSerial::tunedDelay(unsigned int)+0x2>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:214
}
     55a:	08 95       	ret

0000055c <SoftSerial::handle_interrupt()>:
handle_interrupt():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:336
// Interrupt handling
//

/* static */
inline void SoftSerial::handle_interrupt()
{
     55c:	ef 92       	push	r14
     55e:	ff 92       	push	r15
     560:	0f 93       	push	r16
     562:	1f 93       	push	r17
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:337
  if (active_object)
     568:	c0 91 c4 01 	lds	r28, 0x01C4	; 0x8001c4 <SoftSerial::active_object>
     56c:	d0 91 c5 01 	lds	r29, 0x01C5	; 0x8001c5 <SoftSerial::active_object+0x1>
     570:	20 97       	sbiw	r28, 0x00	; 0
     572:	49 f0       	breq	.+18     	; 0x586 <SoftSerial::handle_interrupt()+0x2a>
     574:	ee 81       	ldd	r30, Y+6	; 0x06
     576:	ff 81       	ldd	r31, Y+7	; 0x07
     578:	9d 81       	ldd	r25, Y+5	; 0x05
recv():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:260

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     57a:	8b 89       	ldd	r24, Y+19	; 0x13
     57c:	81 ff       	sbrs	r24, 1
     57e:	0a c0       	rjmp	.+20     	; 0x594 <SoftSerial::handle_interrupt()+0x38>
rx_pin_read():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:327
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     580:	80 81       	ld	r24, Z
     582:	89 23       	and	r24, r25
recv():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:260

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     584:	51 f4       	brne	.+20     	; 0x59a <SoftSerial::handle_interrupt()+0x3e>
handle_interrupt():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:341
{
  if (active_object)
  {
    active_object->recv();
  }
}
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	1f 91       	pop	r17
     58c:	0f 91       	pop	r16
     58e:	ff 90       	pop	r15
     590:	ef 90       	pop	r14
     592:	08 95       	ret
rx_pin_read():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:327
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     594:	80 81       	ld	r24, Z
     596:	89 23       	and	r24, r25
recv():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:260

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     598:	b1 f7       	brne	.-20     	; 0x586 <SoftSerial::handle_interrupt()+0x2a>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:263
  {
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
     59a:	8b 85       	ldd	r24, Y+11	; 0x0b
     59c:	9c 85       	ldd	r25, Y+12	; 0x0c
     59e:	d7 df       	rcall	.-82     	; 0x54e <SoftSerial::tunedDelay(unsigned int)>
     5a0:	88 e0       	ldi	r24, 0x08	; 8
     5a2:	e8 2e       	mov	r14, r24
     5a4:	f1 2c       	mov	r15, r1
handle_interrupt():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:256
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
     5a6:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:267
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=0x1; i; i <<= 1)
     5a8:	01 e0       	ldi	r16, 0x01	; 1
recv():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:269
    {
      tunedDelay(_rx_delay_intrabit);
     5aa:	8d 85       	ldd	r24, Y+13	; 0x0d
     5ac:	9e 85       	ldd	r25, Y+14	; 0x0e
     5ae:	cf df       	rcall	.-98     	; 0x54e <SoftSerial::tunedDelay(unsigned int)>
rx_pin_read():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:327
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     5b0:	ee 81       	ldd	r30, Y+6	; 0x06
     5b2:	ff 81       	ldd	r31, Y+7	; 0x07
     5b4:	80 81       	ld	r24, Z
     5b6:	9d 81       	ldd	r25, Y+5	; 0x05
     5b8:	89 23       	and	r24, r25
recv():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:272
    for (uint8_t i=0x1; i; i <<= 1)
    {
      tunedDelay(_rx_delay_intrabit);
      DebugPulse(_DEBUG_PIN2, 1);
      uint8_t noti = ~i;
      if (rx_pin_read())
     5ba:	31 f1       	breq	.+76     	; 0x608 <SoftSerial::handle_interrupt()+0xac>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:273
        d |= i;
     5bc:	10 2b       	or	r17, r16
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:267
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=0x1; i; i <<= 1)
     5be:	00 0f       	add	r16, r16
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	e8 1a       	sub	r14, r24
     5c4:	f1 08       	sbc	r15, r1
     5c6:	89 f7       	brne	.-30     	; 0x5aa <SoftSerial::handle_interrupt()+0x4e>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:279
      else // else clause added to ensure function timing is ~balanced
        d &= noti;
    }

    // skip the stop bit
    tunedDelay(_rx_delay_stopbit);
     5c8:	8f 85       	ldd	r24, Y+15	; 0x0f
     5ca:	98 89       	ldd	r25, Y+16	; 0x10
     5cc:	c0 df       	rcall	.-128    	; 0x54e <SoftSerial::tunedDelay(unsigned int)>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:282
    DebugPulse(_DEBUG_PIN2, 1);

    if (_inverse_logic)
     5ce:	8b 89       	ldd	r24, Y+19	; 0x13
     5d0:	81 fd       	sbrc	r24, 1
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:283
      d = ~d;
     5d2:	10 95       	com	r17
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:286

    // if buffer full, set the overflow flag and return
    if ((_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF != _receive_buffer_head) 
     5d4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <SoftSerial::_receive_buffer_tail>
     5d8:	20 91 c2 01 	lds	r18, 0x01C2	; 0x8001c2 <SoftSerial::_receive_buffer_head>
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	01 96       	adiw	r24, 0x01	; 1
     5e0:	8f 73       	andi	r24, 0x3F	; 63
     5e2:	99 27       	eor	r25, r25
     5e4:	28 17       	cp	r18, r24
     5e6:	19 06       	cpc	r1, r25
     5e8:	99 f0       	breq	.+38     	; 0x610 <SoftSerial::handle_interrupt()+0xb4>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:289
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
     5ea:	e0 91 c3 01 	lds	r30, 0x01C3	; 0x8001c3 <SoftSerial::_receive_buffer_tail>
     5ee:	f0 e0       	ldi	r31, 0x00	; 0
     5f0:	e8 5a       	subi	r30, 0xA8	; 168
     5f2:	fe 4f       	sbci	r31, 0xFE	; 254
     5f4:	10 83       	st	Z, r17
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:290
      _receive_buffer_tail = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
     5f6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <SoftSerial::_receive_buffer_tail>
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	01 96       	adiw	r24, 0x01	; 1
     5fe:	8f 73       	andi	r24, 0x3F	; 63
     600:	99 27       	eor	r25, r25
     602:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <SoftSerial::_receive_buffer_tail>
     606:	bf cf       	rjmp	.-130    	; 0x586 <SoftSerial::handle_interrupt()+0x2a>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:271
    // Read each of the 8 bits
    for (uint8_t i=0x1; i; i <<= 1)
    {
      tunedDelay(_rx_delay_intrabit);
      DebugPulse(_DEBUG_PIN2, 1);
      uint8_t noti = ~i;
     608:	80 2f       	mov	r24, r16
     60a:	80 95       	com	r24
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:275
      if (rx_pin_read())
        d |= i;
      else // else clause added to ensure function timing is ~balanced
        d &= noti;
     60c:	18 23       	and	r17, r24
     60e:	d7 cf       	rjmp	.-82     	; 0x5be <SoftSerial::handle_interrupt()+0x62>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:297
    else 
    {
#if _DEBUG // for scope: pulse pin as overflow indictator
      DebugPulse(_DEBUG_PIN1, 1);
#endif
      _buffer_overflow = true;
     610:	8b 89       	ldd	r24, Y+19	; 0x13
     612:	81 60       	ori	r24, 0x01	; 1
     614:	8b 8b       	std	Y+19, r24	; 0x13
     616:	b7 cf       	rjmp	.-146    	; 0x586 <SoftSerial::handle_interrupt()+0x2a>

00000618 <starts_in_buffer(char const*, int)>:
starts_in_buffer():
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:373
  }
  serial_idx = 0;
}

// check if the given data is at the start of the serial input buffer
bool starts_in_buffer(const char* data, int length) {
     618:	cf 93       	push	r28
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:376
  int idx = 0;
  bool found = false;
  while (serial_buffer[idx] == data[idx] && idx < serial_idx && !found) {
     61a:	40 91 b2 01 	lds	r20, 0x01B2	; 0x8001b2 <serial_idx>
     61e:	50 91 b3 01 	lds	r21, 0x01B3	; 0x8001b3 <serial_idx+0x1>
     622:	e2 ea       	ldi	r30, 0xA2	; 162
     624:	f1 e0       	ldi	r31, 0x01	; 1
     626:	dc 01       	movw	r26, r24
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:375
}

// check if the given data is at the start of the serial input buffer
bool starts_in_buffer(const char* data, int length) {
  int idx = 0;
  bool found = false;
     628:	80 e0       	ldi	r24, 0x00	; 0
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:374
  serial_idx = 0;
}

// check if the given data is at the start of the serial input buffer
bool starts_in_buffer(const char* data, int length) {
  int idx = 0;
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	20 e0       	ldi	r18, 0x00	; 0
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:376
  bool found = false;
  while (serial_buffer[idx] == data[idx] && idx < serial_idx && !found) {
     62e:	c1 91       	ld	r28, Z+
     630:	9d 91       	ld	r25, X+
     632:	c9 13       	cpse	r28, r25
     634:	0d c0       	rjmp	.+26     	; 0x650 <starts_in_buffer(char const*, int)+0x38>
     636:	24 17       	cp	r18, r20
     638:	35 07       	cpc	r19, r21
     63a:	54 f4       	brge	.+20     	; 0x650 <starts_in_buffer(char const*, int)+0x38>
     63c:	81 11       	cpse	r24, r1
     63e:	08 c0       	rjmp	.+16     	; 0x650 <starts_in_buffer(char const*, int)+0x38>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:377
    idx++;
     640:	2f 5f       	subi	r18, 0xFF	; 255
     642:	3f 4f       	sbci	r19, 0xFF	; 255
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:378
    if (idx == length) {
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	26 17       	cp	r18, r22
     648:	37 07       	cpc	r19, r23
     64a:	89 f3       	breq	.-30     	; 0x62e <starts_in_buffer(char const*, int)+0x16>
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	ef cf       	rjmp	.-34     	; 0x62e <starts_in_buffer(char const*, int)+0x16>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:383
      found = true;
    }
  }
  return found;
}
     650:	cf 91       	pop	r28
     652:	08 95       	ret

00000654 <reset_buffer()>:
reset_buffer():
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:365
  poweroff_aval = analogRead(SERIAL_RX_PIN);
  return ((poweroff_aval / 1024.0) < 0.1);
}

// reset the serial input buffer
void reset_buffer() {
     654:	e2 ea       	ldi	r30, 0xA2	; 162
     656:	f1 e0       	ldi	r31, 0x01	; 1
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:367
  for (int i = 0; i < BUF_SIZE; i++) {
    serial_buffer[i] = 0;
     658:	11 92       	st	Z+, r1
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:366
  return ((poweroff_aval / 1024.0) < 0.1);
}

// reset the serial input buffer
void reset_buffer() {
  for (int i = 0; i < BUF_SIZE; i++) {
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	e2 3b       	cpi	r30, 0xB2	; 178
     65e:	f8 07       	cpc	r31, r24
     660:	d9 f7       	brne	.-10     	; 0x658 <reset_buffer()+0x4>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:369
    serial_buffer[i] = 0;
  }
  serial_idx = 0;
     662:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <serial_idx+0x1>
     666:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <serial_idx>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:370
}
     66a:	08 95       	ret

0000066c <update_led()>:
update_led():
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:268
  swserial.end();
}

// update led
// pre: display_mode = LED_MODE
void update_led() {
     66c:	cf 92       	push	r12
     66e:	df 92       	push	r13
     670:	ef 92       	push	r14
     672:	ff 92       	push	r15
     674:	cf 93       	push	r28
     676:	df 93       	push	r29
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:269
  if (led_status != old_led_status) {
     678:	c0 91 57 01 	lds	r28, 0x0157	; 0x800157 <led_status>
     67c:	d0 91 4e 01 	lds	r29, 0x014E	; 0x80014e <__data_end>
     680:	cd 17       	cp	r28, r29
     682:	39 f0       	breq	.+14     	; 0x692 <update_led()+0x26>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:270
    if (led_status == LED_OFF) {
     684:	c1 11       	cpse	r28, r1
     686:	0c c0       	rjmp	.+24     	; 0x6a0 <update_led()+0x34>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:271
      digitalWrite(LED_PIN, LOW);
     688:	60 e0       	ldi	r22, 0x00	; 0
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	5e dd       	rcall	.-1348   	; 0x14a <digitalWrite>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:272
      old_led_status = led_status;
     68e:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__data_end>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:296
        }
        led_timestamp = timestamp;
      }
    }
  }
}
     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
     696:	ff 90       	pop	r15
     698:	ef 90       	pop	r14
     69a:	df 90       	pop	r13
     69c:	cf 90       	pop	r12
     69e:	08 95       	ret
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:273
void update_led() {
  if (led_status != old_led_status) {
    if (led_status == LED_OFF) {
      digitalWrite(LED_PIN, LOW);
      old_led_status = led_status;
    } else if (led_status == LED_ON) {
     6a0:	c1 30       	cpi	r28, 0x01	; 1
     6a2:	31 f4       	brne	.+12     	; 0x6b0 <update_led()+0x44>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:274
      digitalWrite(LED_PIN, HIGH);
     6a4:	61 e0       	ldi	r22, 0x01	; 1
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	50 dd       	rcall	.-1376   	; 0x14a <digitalWrite>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:275
      old_led_status = led_status;
     6aa:	c0 93 4e 01 	sts	0x014E, r28	; 0x80014e <__data_end>
     6ae:	f1 cf       	rjmp	.-30     	; 0x692 <update_led()+0x26>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:277
    } else {
      if (timestamp >= led_timestamp + led_period_ms) {
     6b0:	c0 90 d8 01 	lds	r12, 0x01D8	; 0x8001d8 <timestamp>
     6b4:	d0 90 d9 01 	lds	r13, 0x01D9	; 0x8001d9 <timestamp+0x1>
     6b8:	e0 90 da 01 	lds	r14, 0x01DA	; 0x8001da <timestamp+0x2>
     6bc:	f0 90 db 01 	lds	r15, 0x01DB	; 0x8001db <timestamp+0x3>
     6c0:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <led_timestamp>
     6c4:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <led_timestamp+0x1>
     6c8:	a0 91 51 01 	lds	r26, 0x0151	; 0x800151 <led_timestamp+0x2>
     6cc:	b0 91 52 01 	lds	r27, 0x0152	; 0x800152 <led_timestamp+0x3>
     6d0:	40 91 53 01 	lds	r20, 0x0153	; 0x800153 <led_period_ms>
     6d4:	50 91 54 01 	lds	r21, 0x0154	; 0x800154 <led_period_ms+0x1>
     6d8:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <led_period_ms+0x2>
     6dc:	70 91 56 01 	lds	r23, 0x0156	; 0x800156 <led_period_ms+0x3>
     6e0:	84 0f       	add	r24, r20
     6e2:	95 1f       	adc	r25, r21
     6e4:	a6 1f       	adc	r26, r22
     6e6:	b7 1f       	adc	r27, r23
     6e8:	c8 16       	cp	r12, r24
     6ea:	d9 06       	cpc	r13, r25
     6ec:	ea 06       	cpc	r14, r26
     6ee:	fb 06       	cpc	r15, r27
     6f0:	80 f2       	brcs	.-96     	; 0x692 <update_led()+0x26>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:278
        if (led_status == LED_BLINK_ONCE_OFF) {
     6f2:	c2 30       	cpi	r28, 0x02	; 2
     6f4:	39 f4       	brne	.+14     	; 0x704 <update_led()+0x98>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:279
          digitalWrite(LED_PIN, LOW);
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	27 dd       	rcall	.-1458   	; 0x14a <digitalWrite>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:280
          led_status = LED_BLINK_ONCE_ON;
     6fc:	83 e0       	ldi	r24, 0x03	; 3
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:290
        } else if (led_status == LED_BLINK_CONT_OFF) {
          digitalWrite(LED_PIN, LOW);
          led_status = LED_BLINK_CONT_ON;
        } else if (led_status == LED_BLINK_CONT_ON) {
          digitalWrite(LED_PIN, HIGH);
          led_status = LED_BLINK_CONT_OFF;
     6fe:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <led_status>
     702:	09 c0       	rjmp	.+18     	; 0x716 <update_led()+0xaa>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:281
    } else {
      if (timestamp >= led_timestamp + led_period_ms) {
        if (led_status == LED_BLINK_ONCE_OFF) {
          digitalWrite(LED_PIN, LOW);
          led_status = LED_BLINK_ONCE_ON;
        } else if (led_status == LED_BLINK_ONCE_ON) {
     704:	c3 30       	cpi	r28, 0x03	; 3
     706:	81 f4       	brne	.+32     	; 0x728 <update_led()+0xbc>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:282
          digitalWrite(LED_PIN, HIGH);
     708:	61 e0       	ldi	r22, 0x01	; 1
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	1e dd       	rcall	.-1476   	; 0x14a <digitalWrite>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:283
          led_status = old_led_status;
     70e:	d0 93 57 01 	sts	0x0157, r29	; 0x800157 <led_status>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:284
          old_led_status = LED_BLINK_ONCE_ON;
     712:	c0 93 4e 01 	sts	0x014E, r28	; 0x80014e <__data_end>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:292
          led_status = LED_BLINK_CONT_ON;
        } else if (led_status == LED_BLINK_CONT_ON) {
          digitalWrite(LED_PIN, HIGH);
          led_status = LED_BLINK_CONT_OFF;
        }
        led_timestamp = timestamp;
     716:	c0 92 4f 01 	sts	0x014F, r12	; 0x80014f <led_timestamp>
     71a:	d0 92 50 01 	sts	0x0150, r13	; 0x800150 <led_timestamp+0x1>
     71e:	e0 92 51 01 	sts	0x0151, r14	; 0x800151 <led_timestamp+0x2>
     722:	f0 92 52 01 	sts	0x0152, r15	; 0x800152 <led_timestamp+0x3>
     726:	b5 cf       	rjmp	.-150    	; 0x692 <update_led()+0x26>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:285
          led_status = LED_BLINK_ONCE_ON;
        } else if (led_status == LED_BLINK_ONCE_ON) {
          digitalWrite(LED_PIN, HIGH);
          led_status = old_led_status;
          old_led_status = LED_BLINK_ONCE_ON;
        } else if (led_status == LED_BLINK_CONT_OFF) {
     728:	c4 30       	cpi	r28, 0x04	; 4
     72a:	29 f4       	brne	.+10     	; 0x736 <update_led()+0xca>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:286
          digitalWrite(LED_PIN, LOW);
     72c:	60 e0       	ldi	r22, 0x00	; 0
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	0c dd       	rcall	.-1512   	; 0x14a <digitalWrite>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:287
          led_status = LED_BLINK_CONT_ON;
     732:	85 e0       	ldi	r24, 0x05	; 5
     734:	e4 cf       	rjmp	.-56     	; 0x6fe <update_led()+0x92>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:288
        } else if (led_status == LED_BLINK_CONT_ON) {
     736:	c5 30       	cpi	r28, 0x05	; 5
     738:	71 f7       	brne	.-36     	; 0x716 <update_led()+0xaa>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:289
          digitalWrite(LED_PIN, HIGH);
     73a:	61 e0       	ldi	r22, 0x01	; 1
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	05 dd       	rcall	.-1526   	; 0x14a <digitalWrite>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:290
          led_status = LED_BLINK_CONT_OFF;
     740:	84 e0       	ldi	r24, 0x04	; 4
     742:	dd cf       	rjmp	.-70     	; 0x6fe <update_led()+0x92>

00000744 <set_led(unsigned char, unsigned long)>:
set_led():
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:301
}

// set new led status and blink period
// pre: display_mode = LED_MODE
void set_led(uint8_t status, unsigned long period_ms) {
  led_status = status;
     744:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <led_status>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:302
  led_period_ms = period_ms;
     748:	40 93 53 01 	sts	0x0153, r20	; 0x800153 <led_period_ms>
     74c:	50 93 54 01 	sts	0x0154, r21	; 0x800154 <led_period_ms+0x1>
     750:	60 93 55 01 	sts	0x0155, r22	; 0x800155 <led_period_ms+0x2>
     754:	70 93 56 01 	sts	0x0156, r23	; 0x800156 <led_period_ms+0x3>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:303
  led_timestamp = timestamp;
     758:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <timestamp>
     75c:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <timestamp+0x1>
     760:	a0 91 da 01 	lds	r26, 0x01DA	; 0x8001da <timestamp+0x2>
     764:	b0 91 db 01 	lds	r27, 0x01DB	; 0x8001db <timestamp+0x3>
     768:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <led_timestamp>
     76c:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <led_timestamp+0x1>
     770:	a0 93 51 01 	sts	0x0151, r26	; 0x800151 <led_timestamp+0x2>
     774:	b0 93 52 01 	sts	0x0152, r27	; 0x800152 <led_timestamp+0x3>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:304
  pinMode(PB1, OUTPUT);
     778:	61 e0       	ldi	r22, 0x01	; 1
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	16 dd       	rcall	.-1492   	; 0x1aa <pinMode>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:305
  update_led();
     77e:	76 cf       	rjmp	.-276    	; 0x66c <update_led()>

00000780 <SoftSerial::write(unsigned char)>:
write():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:491

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}

size_t SoftSerial::write(uint8_t b)
{
     780:	df 92       	push	r13
     782:	ef 92       	push	r14
     784:	ff 92       	push	r15
     786:	0f 93       	push	r16
     788:	1f 93       	push	r17
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	ec 01       	movw	r28, r24
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:492
  if (_tx_delay == 0) {
     790:	89 89       	ldd	r24, Y+17	; 0x11
     792:	9a 89       	ldd	r25, Y+18	; 0x12
     794:	89 2b       	or	r24, r25
     796:	71 f4       	brne	.+28     	; 0x7b4 <SoftSerial::write(unsigned char)+0x34>
_ZN5Print13setWriteErrorEi():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/Print.h:73
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	9b 83       	std	Y+3, r25	; 0x03
     79e:	8a 83       	std	Y+2, r24	; 0x02
write():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:494
    setWriteError();
    return 0;
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:538

  SREG = oldSREG; // turn interrupts back on
  tunedDelay(_tx_delay);
  
  return 1;
}
     7a4:	df 91       	pop	r29
     7a6:	cf 91       	pop	r28
     7a8:	1f 91       	pop	r17
     7aa:	0f 91       	pop	r16
     7ac:	ff 90       	pop	r15
     7ae:	ef 90       	pop	r14
     7b0:	df 90       	pop	r13
     7b2:	08 95       	ret
     7b4:	16 2f       	mov	r17, r22
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:497
  if (_tx_delay == 0) {
    setWriteError();
    return 0;
  }

  uint8_t oldSREG = SREG;
     7b6:	df b6       	in	r13, 0x3f	; 63
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:498
  cli();  // turn off interrupts for a clean txmit
     7b8:	f8 94       	cli
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:501

  // Write the start bit
  tx_pin_write(_inverse_logic ? HIGH : LOW);
     7ba:	8b 89       	ldd	r24, Y+19	; 0x13
tx_pin_write():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:319
#endif
}

void SoftSerial::tx_pin_write(uint8_t pin_state)
{
  if (pin_state == LOW)
     7bc:	81 fd       	sbrc	r24, 1
     7be:	22 c0       	rjmp	.+68     	; 0x804 <SoftSerial::write(unsigned char)+0x84>
     7c0:	ce 01       	movw	r24, r28
     7c2:	59 de       	rcall	.-846    	; 0x476 <SoftSerial::tx_pin_write(unsigned char) [clone .part.4]>
write():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:502
  uint8_t oldSREG = SREG;
  cli();  // turn off interrupts for a clean txmit

  // Write the start bit
  tx_pin_write(_inverse_logic ? HIGH : LOW);
  tunedDelay(_tx_delay + XMIT_START_ADJUSTMENT);
     7c4:	89 89       	ldd	r24, Y+17	; 0x11
     7c6:	9a 89       	ldd	r25, Y+18	; 0x12
     7c8:	c2 de       	rcall	.-636    	; 0x54e <SoftSerial::tunedDelay(unsigned int)>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:505

  // Write each of the 8 bits
  if (_inverse_logic)
     7ca:	8b 89       	ldd	r24, Y+19	; 0x13
     7cc:	98 e0       	ldi	r25, 0x08	; 8
     7ce:	e9 2e       	mov	r14, r25
     7d0:	f1 2c       	mov	r15, r1
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:507
  {
    for (byte mask = 0x01; mask; mask <<= 1)
     7d2:	01 e0       	ldi	r16, 0x01	; 1
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:505
  // Write the start bit
  tx_pin_write(_inverse_logic ? HIGH : LOW);
  tunedDelay(_tx_delay + XMIT_START_ADJUSTMENT);

  // Write each of the 8 bits
  if (_inverse_logic)
     7d4:	81 ff       	sbrs	r24, 1
     7d6:	24 c0       	rjmp	.+72     	; 0x820 <SoftSerial::write(unsigned char)+0xa0>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:509
  {
    for (byte mask = 0x01; mask; mask <<= 1)
    {
      if (b & mask) // choose bit
     7d8:	81 2f       	mov	r24, r17
     7da:	80 23       	and	r24, r16
     7dc:	d1 f0       	breq	.+52     	; 0x812 <SoftSerial::write(unsigned char)+0x92>
tx_pin_write():
     7de:	ce 01       	movw	r24, r28
     7e0:	4a de       	rcall	.-876    	; 0x476 <SoftSerial::tx_pin_write(unsigned char) [clone .part.4]>
write():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:514
        tx_pin_write(LOW); // send 1
      else
        tx_pin_write(HIGH); // send 0
    
      tunedDelay(_tx_delay);
     7e2:	89 89       	ldd	r24, Y+17	; 0x11
     7e4:	9a 89       	ldd	r25, Y+18	; 0x12
     7e6:	b3 de       	rcall	.-666    	; 0x54e <SoftSerial::tunedDelay(unsigned int)>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:507
  tunedDelay(_tx_delay + XMIT_START_ADJUSTMENT);

  // Write each of the 8 bits
  if (_inverse_logic)
  {
    for (byte mask = 0x01; mask; mask <<= 1)
     7e8:	00 0f       	add	r16, r16
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	e8 1a       	sub	r14, r24
     7ee:	f1 08       	sbc	r15, r1
     7f0:	99 f7       	brne	.-26     	; 0x7d8 <SoftSerial::write(unsigned char)+0x58>
tx_pin_write():
     7f2:	ce 01       	movw	r24, r28
     7f4:	40 de       	rcall	.-896    	; 0x476 <SoftSerial::tx_pin_write(unsigned char) [clone .part.4]>
write():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:534
    }

    tx_pin_write(HIGH); // restore pin to natural state
  }

  SREG = oldSREG; // turn interrupts back on
     7f6:	df be       	out	0x3f, r13	; 63
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:535
  tunedDelay(_tx_delay);
     7f8:	89 89       	ldd	r24, Y+17	; 0x11
     7fa:	9a 89       	ldd	r25, Y+18	; 0x12
     7fc:	a8 de       	rcall	.-688    	; 0x54e <SoftSerial::tunedDelay(unsigned int)>
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	d0 cf       	rjmp	.-96     	; 0x7a4 <SoftSerial::write(unsigned char)+0x24>
tx_pin_write():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:322
void SoftSerial::tx_pin_write(uint8_t pin_state)
{
  if (pin_state == LOW)
    *_transmitPortRegister &= ~_transmitBitMask;
  else
    *_transmitPortRegister |= _transmitBitMask;
     804:	e9 85       	ldd	r30, Y+9	; 0x09
     806:	fa 85       	ldd	r31, Y+10	; 0x0a
     808:	80 81       	ld	r24, Z
     80a:	98 85       	ldd	r25, Y+8	; 0x08
     80c:	89 2b       	or	r24, r25
     80e:	80 83       	st	Z, r24
     810:	d9 cf       	rjmp	.-78     	; 0x7c4 <SoftSerial::write(unsigned char)+0x44>
     812:	e9 85       	ldd	r30, Y+9	; 0x09
     814:	fa 85       	ldd	r31, Y+10	; 0x0a
     816:	80 81       	ld	r24, Z
     818:	98 85       	ldd	r25, Y+8	; 0x08
     81a:	89 2b       	or	r24, r25
     81c:	80 83       	st	Z, r24
     81e:	e1 cf       	rjmp	.-62     	; 0x7e2 <SoftSerial::write(unsigned char)+0x62>
write():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:523
  }
  else
  {
    for (byte mask = 0x01; mask; mask <<= 1)
    {
      if (b & mask) // choose bit
     820:	81 2f       	mov	r24, r17
     822:	80 23       	and	r24, r16
     824:	a9 f0       	breq	.+42     	; 0x850 <SoftSerial::write(unsigned char)+0xd0>
tx_pin_write():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:322
void SoftSerial::tx_pin_write(uint8_t pin_state)
{
  if (pin_state == LOW)
    *_transmitPortRegister &= ~_transmitBitMask;
  else
    *_transmitPortRegister |= _transmitBitMask;
     826:	e9 85       	ldd	r30, Y+9	; 0x09
     828:	fa 85       	ldd	r31, Y+10	; 0x0a
     82a:	80 81       	ld	r24, Z
     82c:	98 85       	ldd	r25, Y+8	; 0x08
     82e:	89 2b       	or	r24, r25
     830:	80 83       	st	Z, r24
write():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:528
      if (b & mask) // choose bit
        tx_pin_write(HIGH); // send 1
      else
        tx_pin_write(LOW); // send 0
    
      tunedDelay(_tx_delay);
     832:	89 89       	ldd	r24, Y+17	; 0x11
     834:	9a 89       	ldd	r25, Y+18	; 0x12
     836:	8b de       	rcall	.-746    	; 0x54e <SoftSerial::tunedDelay(unsigned int)>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:521

    tx_pin_write(LOW); // restore pin to natural state
  }
  else
  {
    for (byte mask = 0x01; mask; mask <<= 1)
     838:	00 0f       	add	r16, r16
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	e8 1a       	sub	r14, r24
     83e:	f1 08       	sbc	r15, r1
     840:	79 f7       	brne	.-34     	; 0x820 <SoftSerial::write(unsigned char)+0xa0>
tx_pin_write():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:322
void SoftSerial::tx_pin_write(uint8_t pin_state)
{
  if (pin_state == LOW)
    *_transmitPortRegister &= ~_transmitBitMask;
  else
    *_transmitPortRegister |= _transmitBitMask;
     842:	e9 85       	ldd	r30, Y+9	; 0x09
     844:	fa 85       	ldd	r31, Y+10	; 0x0a
     846:	80 81       	ld	r24, Z
     848:	98 85       	ldd	r25, Y+8	; 0x08
     84a:	89 2b       	or	r24, r25
     84c:	80 83       	st	Z, r24
     84e:	d3 cf       	rjmp	.-90     	; 0x7f6 <SoftSerial::write(unsigned char)+0x76>
     850:	ce 01       	movw	r24, r28
     852:	11 de       	rcall	.-990    	; 0x476 <SoftSerial::tx_pin_write(unsigned char) [clone .part.4]>
     854:	ee cf       	rjmp	.-36     	; 0x832 <SoftSerial::write(unsigned char)+0xb2>

00000856 <Print::println() [clone .constprop.21]>:
println():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/Print.cpp:119
    ch = pgm_read_byte( s );
  }
  return( n );
}

size_t Print::println(void)
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
print():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/Print.cpp:58
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     85a:	6d e0       	ldi	r22, 0x0D	; 13
     85c:	8b ee       	ldi	r24, 0xEB	; 235
     85e:	91 e0       	ldi	r25, 0x01	; 1
     860:	8f df       	rcall	.-226    	; 0x780 <SoftSerial::write(unsigned char)>
     862:	ec 01       	movw	r28, r24
     864:	6a e0       	ldi	r22, 0x0A	; 10
     866:	8b ee       	ldi	r24, 0xEB	; 235
     868:	91 e0       	ldi	r25, 0x01	; 1
     86a:	8a df       	rcall	.-236    	; 0x780 <SoftSerial::write(unsigned char)>
println():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/Print.cpp:124
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
     86c:	8c 0f       	add	r24, r28
     86e:	9d 1f       	adc	r25, r29
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	08 95       	ret

00000876 <Print::println(char const*) [clone .constprop.19]>:
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/Print.cpp:133
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
write():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/Print.h:81

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
     87a:	fc 01       	movw	r30, r24
     87c:	01 90       	ld	r0, Z+
     87e:	00 20       	and	r0, r0
     880:	e9 f7       	brne	.-6      	; 0x87c <Print::println(char const*) [clone .constprop.19]+0x6>
     882:	31 97       	sbiw	r30, 0x01	; 1
     884:	af 01       	movw	r20, r30
     886:	48 1b       	sub	r20, r24
     888:	59 0b       	sbc	r21, r25
     88a:	bc 01       	movw	r22, r24
     88c:	8b ee       	ldi	r24, 0xEB	; 235
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	ca dd       	rcall	.-1132   	; 0x426 <Print::write(unsigned char const*, unsigned int)>
     892:	ec 01       	movw	r28, r24
println():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/Print.cpp:136
{
  size_t n = print(c);
  n += println();
     894:	e0 df       	rcall	.-64     	; 0x856 <Print::println() [clone .constprop.21]>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/Print.cpp:138
  return n;
}
     896:	8c 0f       	add	r24, r28
     898:	9d 1f       	adc	r25, r29
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	08 95       	ret

000008a0 <power_off(bool)>:
power_off():
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:240
    swserial.begin(BAUD_RATE);
  }
}

// power pi off
void power_off(bool verbose) {
     8a0:	cf 92       	push	r12
     8a2:	df 92       	push	r13
     8a4:	ef 92       	push	r14
     8a6:	ff 92       	push	r15
     8a8:	0f 93       	push	r16
     8aa:	1f 93       	push	r17
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	00 d0       	rcall	.+0      	; 0x8b2 <power_off(bool)+0x12>
     8b2:	00 d0       	rcall	.+0      	; 0x8b4 <power_off(bool)+0x14>
     8b4:	cd b7       	in	r28, 0x3d	; 61
     8b6:	de b7       	in	r29, 0x3e	; 62
     8b8:	18 2f       	mov	r17, r24
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:241
  if (verbose && display_mode == TM1637_MODE) {
     8ba:	88 23       	and	r24, r24
     8bc:	99 f0       	breq	.+38     	; 0x8e4 <power_off(bool)+0x44>
     8be:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <display_mode>
     8c2:	81 30       	cpi	r24, 0x01	; 1
     8c4:	79 f4       	brne	.+30     	; 0x8e4 <power_off(bool)+0x44>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:242
    display.showNumberDec(poweroff_aval, false);
     8c6:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <poweroff_aval>
     8ca:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <poweroff_aval+0x1>
showNumberBaseEx():
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:139
	}


    uint8_t digits[4];

	if (num == 0 && !leading_zero) {
     8ce:	00 97       	sbiw	r24, 0x00	; 0
     8d0:	91 f5       	brne	.+100    	; 0x936 <power_off(bool)+0x96>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:142
		// Singular case - take care separately
		for(uint8_t i = 0; i < (length-1); i++)
			digits[i] = 0;
     8d2:	19 82       	std	Y+1, r1	; 0x01
     8d4:	1a 82       	std	Y+2, r1	; 0x02
     8d6:	1b 82       	std	Y+3, r1	; 0x03
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:143
		digits[length-1] = encodeDigit(0);
     8d8:	8f e3       	ldi	r24, 0x3F	; 63
     8da:	8c 83       	std	Y+4, r24	; 0x04
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:177
	if(dots != 0)
	{
		showDots(dots, digits);
	}
    
    setSegments(digits, length, pos);
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	08 dd       	rcall	.-1520   	; 0x2f2 <TM1637Display::setSegments(unsigned char const*, unsigned char, unsigned char) [clone .constprop.13]>
power_off():
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:243
    delay(POWEROFF_DELAY_MS);
     8e2:	7a dd       	rcall	.-1292   	; 0x3d8 <delay.constprop.9>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:245
  }
  if (display_mode == LED_MODE) {
     8e4:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <display_mode>
     8e8:	81 11       	cpse	r24, r1
     8ea:	5c c0       	rjmp	.+184    	; 0x9a4 <power_off(bool)+0x104>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:246
    if (verbose) {
     8ec:	11 11       	cpse	r17, r1
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:247
      delay(POWEROFF_DELAY_MS);
     8ee:	74 dd       	rcall	.-1304   	; 0x3d8 <delay.constprop.9>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:249
    }
    set_led(LED_OFF, 0);
     8f0:	40 e0       	ldi	r20, 0x00	; 0
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	ba 01       	movw	r22, r20
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	25 df       	rcall	.-438    	; 0x744 <set_led(unsigned char, unsigned long)>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:258
      delay(POWEROFF_DELAY_MS);
    }
    display.setBrightness(DISPLAY_BRIGHTNESS, false);
    display.clear();
  }
  digitalWrite(RELAY_PIN, RELAY_OFF);
     8fa:	61 e0       	ldi	r22, 0x01	; 1
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	25 dc       	rcall	.-1974   	; 0x14a <digitalWrite>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:259
  relay_status = RELAY_OFF;
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:260
  power_status = POWERED_OFF;
     906:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <power_status>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:261
  serial_data = CMD_NULL;
     90a:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <serial_data+0x1>
     90e:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <serial_data>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:262
  command = CMD_NULL;
     912:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <command+0x1>
     916:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <command>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:263
  swserial.end();
     91a:	fa db       	rcall	.-2060   	; 0x110 <SoftSerial::end() [clone .constprop.32]>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:264
}
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	1f 91       	pop	r17
     92a:	0f 91       	pop	r16
     92c:	ff 90       	pop	r15
     92e:	ef 90       	pop	r14
     930:	df 90       	pop	r13
     932:	cf 90       	pop	r12
     934:	08 95       	ret
showNumberDecEx():
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:118
}

void TM1637Display::showNumberDecEx(int num, uint8_t dots, bool leading_zero,
                                    uint8_t length, uint8_t pos)
{
  showNumberBaseEx(num < 0? -10 : 10, num < 0? -num : num, dots, leading_zero, length, pos);
     936:	9c 01       	movw	r18, r24
     938:	97 ff       	sbrs	r25, 7
     93a:	04 c0       	rjmp	.+8      	; 0x944 <power_off(bool)+0xa4>
     93c:	22 27       	eor	r18, r18
     93e:	33 27       	eor	r19, r19
     940:	28 1b       	sub	r18, r24
     942:	39 0b       	sbc	r19, r25
     944:	49 2f       	mov	r20, r25
     946:	44 1f       	adc	r20, r20
     948:	44 27       	eor	r20, r20
     94a:	44 1f       	adc	r20, r20
     94c:	fe 01       	movw	r30, r28
     94e:	31 96       	adiw	r30, 0x01	; 1
     950:	6e 01       	movw	r12, r28
     952:	83 e0       	ldi	r24, 0x03	; 3
     954:	c8 1a       	sub	r12, r24
     956:	d1 08       	sbc	r13, r1
showNumberBaseEx():
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:155
		//	i--;
		//}
		
		for(int i = length-1; i >= 0; --i)
		{
		    uint8_t digit = num % base;
     958:	8a e0       	ldi	r24, 0x0A	; 10
     95a:	e8 2e       	mov	r14, r24
     95c:	f1 2c       	mov	r15, r1
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:164
				digits[i] = 0;
			else
			    digits[i] = encodeDigit(digit);
				
			if (digit == 0 && num == 0 && negative) {
			    digits[i] = minusSegments;
     95e:	00 e4       	ldi	r16, 0x40	; 64
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:155
		//	i--;
		//}
		
		for(int i = length-1; i >= 0; --i)
		{
		    uint8_t digit = num % base;
     960:	c9 01       	movw	r24, r18
     962:	b7 01       	movw	r22, r14
     964:	bb d6       	rcall	.+3446   	; 0x16dc <__udivmodhi4>
     966:	58 2f       	mov	r21, r24
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:157
			
			if (digit == 0 && num == 0 && leading_zero == false)
     968:	81 11       	cpse	r24, r1
     96a:	09 c0       	rjmp	.+18     	; 0x97e <power_off(bool)+0xde>
     96c:	21 15       	cp	r18, r1
     96e:	31 05       	cpc	r19, r1
     970:	31 f4       	brne	.+12     	; 0x97e <power_off(bool)+0xde>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:159
			    // Leading zero is blank
				digits[i] = 0;
     972:	13 82       	std	Z+3, r1	; 0x03
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:163
			else
			    digits[i] = encodeDigit(digit);
				
			if (digit == 0 && num == 0 && negative) {
     974:	44 23       	and	r20, r20
     976:	69 f0       	breq	.+26     	; 0x992 <power_off(bool)+0xf2>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:164
			    digits[i] = minusSegments;
     978:	03 83       	std	Z+3, r16	; 0x03
power_off():
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:165
				negative = false;
     97a:	40 e0       	ldi	r20, 0x00	; 0
     97c:	0a c0       	rjmp	.+20     	; 0x992 <power_off(bool)+0xf2>
encodeDigit():
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:257
    }
}

uint8_t TM1637Display::encodeDigit(uint8_t digit)
{
	return digitToSegment[digit & 0x0f];
     97e:	8e 59       	subi	r24, 0x9E	; 158
     980:	9f 4f       	sbci	r25, 0xFF	; 255
showNumberBaseEx():
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:161
			
			if (digit == 0 && num == 0 && leading_zero == false)
			    // Leading zero is blank
				digits[i] = 0;
			else
			    digits[i] = encodeDigit(digit);
     982:	dc 01       	movw	r26, r24
     984:	8c 91       	ld	r24, X
     986:	83 83       	std	Z+3, r24	; 0x03
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:163
				
			if (digit == 0 && num == 0 && negative) {
     988:	51 11       	cpse	r21, r1
     98a:	03 c0       	rjmp	.+6      	; 0x992 <power_off(bool)+0xf2>
     98c:	21 15       	cp	r18, r1
     98e:	31 05       	cpc	r19, r1
     990:	89 f3       	breq	.-30     	; 0x974 <power_off(bool)+0xd4>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:168
			    digits[i] = minusSegments;
				negative = false;
			}

			num /= base;
     992:	c9 01       	movw	r24, r18
     994:	b7 01       	movw	r22, r14
     996:	a2 d6       	rcall	.+3396   	; 0x16dc <__udivmodhi4>
     998:	9b 01       	movw	r18, r22
     99a:	31 97       	sbiw	r30, 0x01	; 1
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:153
		//	// Negative number, show the minus sign
		//    digits[i] = minusSegments;
		//	i--;
		//}
		
		for(int i = length-1; i >= 0; --i)
     99c:	ce 16       	cp	r12, r30
     99e:	df 06       	cpc	r13, r31
     9a0:	f9 f6       	brne	.-66     	; 0x960 <power_off(bool)+0xc0>
     9a2:	9c cf       	rjmp	.-200    	; 0x8dc <power_off(bool)+0x3c>
power_off():
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:251
    if (verbose) {
      delay(POWEROFF_DELAY_MS);
    }
    set_led(LED_OFF, 0);
  } else {
    if (verbose) {
     9a4:	11 23       	and	r17, r17
     9a6:	21 f0       	breq	.+8      	; 0x9b0 <power_off(bool)+0x110>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:252
      display.setSegments(DISPLAY_MSG_OFF);
     9a8:	82 e7       	ldi	r24, 0x72	; 114
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	a2 dc       	rcall	.-1724   	; 0x2f2 <TM1637Display::setSegments(unsigned char const*, unsigned char, unsigned char) [clone .constprop.13]>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:253
      delay(POWEROFF_DELAY_MS);
     9ae:	14 dd       	rcall	.-1496   	; 0x3d8 <delay.constprop.9>
setBrightness():
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:78
	digitalWrite(m_pinDIO, LOW);
}

void TM1637Display::setBrightness(uint8_t brightness, bool on)
{
	m_brightness = (brightness & 0x7) | (on? 0x08 : 0x00);
     9b0:	87 e0       	ldi	r24, 0x07	; 7
     9b2:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <display+0x2>
power_off():
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:256
    }
    display.setBrightness(DISPLAY_BRIGHTNESS, false);
    display.clear();
     9b6:	bd dc       	rcall	.-1670   	; 0x332 <TM1637Display::clear() [clone .constprop.12]>
     9b8:	a0 cf       	rjmp	.-192    	; 0x8fa <power_off(bool)+0x5a>

000009ba <__vector_4>:
__vector_4():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring.c:98
#if F_CPU == 16500000L // ISR_NOBLOCK only if V-USB will be used
ISR(MILLISTIMER_OVF_vect, ISR_NOBLOCK)
#else
ISR(MILLISTIMER_OVF_vect)
#endif
{
     9ba:	1f 92       	push	r1
     9bc:	0f 92       	push	r0
     9be:	0f b6       	in	r0, 0x3f	; 63
     9c0:	0f 92       	push	r0
     9c2:	11 24       	eor	r1, r1
     9c4:	2f 93       	push	r18
     9c6:	3f 93       	push	r19
     9c8:	8f 93       	push	r24
     9ca:	9f 93       	push	r25
     9cc:	af 93       	push	r26
     9ce:	bf 93       	push	r27
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring.c:101
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access)
  unsigned long m = millis_timer_millis;
     9d0:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <millis_timer_millis>
     9d4:	90 91 de 01 	lds	r25, 0x01DE	; 0x8001de <millis_timer_millis+0x1>
     9d8:	a0 91 df 01 	lds	r26, 0x01DF	; 0x8001df <millis_timer_millis+0x2>
     9dc:	b0 91 e0 01 	lds	r27, 0x01E0	; 0x8001e0 <millis_timer_millis+0x3>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring.c:102
  unsigned char f = millis_timer_fract;
     9e0:	30 91 dc 01 	lds	r19, 0x01DC	; 0x8001dc <millis_timer_fract>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring.c:104

  f += FRACT_INC;
     9e4:	23 e0       	ldi	r18, 0x03	; 3
     9e6:	23 0f       	add	r18, r19
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring.c:106

  if (f >= FRACT_MAX) 
     9e8:	2d 37       	cpi	r18, 0x7D	; 125
     9ea:	68 f1       	brcs	.+90     	; 0xa46 <__vector_4+0x8c>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring.c:108
  {
    f -= FRACT_MAX;
     9ec:	26 e8       	ldi	r18, 0x86	; 134
     9ee:	23 0f       	add	r18, r19
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring.c:109
    m = m + MILLIS_INC + 1;
     9f0:	02 96       	adiw	r24, 0x02	; 2
     9f2:	a1 1d       	adc	r26, r1
     9f4:	b1 1d       	adc	r27, r1
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring.c:116
  else
  {
    m += MILLIS_INC;
  }

  millis_timer_fract = f;
     9f6:	20 93 dc 01 	sts	0x01DC, r18	; 0x8001dc <millis_timer_fract>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring.c:117
  millis_timer_millis = m;
     9fa:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <millis_timer_millis>
     9fe:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <millis_timer_millis+0x1>
     a02:	a0 93 df 01 	sts	0x01DF, r26	; 0x8001df <millis_timer_millis+0x2>
     a06:	b0 93 e0 01 	sts	0x01E0, r27	; 0x8001e0 <millis_timer_millis+0x3>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring.c:118
  millis_timer_overflow_count++;
     a0a:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <millis_timer_overflow_count>
     a0e:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <millis_timer_overflow_count+0x1>
     a12:	a0 91 e3 01 	lds	r26, 0x01E3	; 0x8001e3 <millis_timer_overflow_count+0x2>
     a16:	b0 91 e4 01 	lds	r27, 0x01E4	; 0x8001e4 <millis_timer_overflow_count+0x3>
     a1a:	01 96       	adiw	r24, 0x01	; 1
     a1c:	a1 1d       	adc	r26, r1
     a1e:	b1 1d       	adc	r27, r1
     a20:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <millis_timer_overflow_count>
     a24:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <millis_timer_overflow_count+0x1>
     a28:	a0 93 e3 01 	sts	0x01E3, r26	; 0x8001e3 <millis_timer_overflow_count+0x2>
     a2c:	b0 93 e4 01 	sts	0x01E4, r27	; 0x8001e4 <millis_timer_overflow_count+0x3>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring.c:119
}
     a30:	bf 91       	pop	r27
     a32:	af 91       	pop	r26
     a34:	9f 91       	pop	r25
     a36:	8f 91       	pop	r24
     a38:	3f 91       	pop	r19
     a3a:	2f 91       	pop	r18
     a3c:	0f 90       	pop	r0
     a3e:	0f be       	out	0x3f, r0	; 63
     a40:	0f 90       	pop	r0
     a42:	1f 90       	pop	r1
     a44:	18 95       	reti
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring.c:113
    f -= FRACT_MAX;
    m = m + MILLIS_INC + 1;
  }
  else
  {
    m += MILLIS_INC;
     a46:	01 96       	adiw	r24, 0x01	; 1
     a48:	a1 1d       	adc	r26, r1
     a4a:	b1 1d       	adc	r27, r1
     a4c:	d4 cf       	rjmp	.-88     	; 0x9f6 <__vector_4+0x3c>

00000a4e <__vector_2>:
__vector_2():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkTinyPinChange/TinyPinChange.cpp:57
	{																													\
		PinChange.Port[VirtualPortIdx].Isr[Idx]();																		\
	}																													\
}

DECLARE_PIN_CHANGE_ISR(0)
     a4e:	1f 92       	push	r1
     a50:	0f 92       	push	r0
     a52:	0f b6       	in	r0, 0x3f	; 63
     a54:	0f 92       	push	r0
     a56:	11 24       	eor	r1, r1
     a58:	2f 93       	push	r18
     a5a:	3f 93       	push	r19
     a5c:	4f 93       	push	r20
     a5e:	5f 93       	push	r21
     a60:	6f 93       	push	r22
     a62:	7f 93       	push	r23
     a64:	8f 93       	push	r24
     a66:	9f 93       	push	r25
     a68:	af 93       	push	r26
     a6a:	bf 93       	push	r27
     a6c:	cf 93       	push	r28
     a6e:	ef 93       	push	r30
     a70:	ff 93       	push	r31
     a72:	86 b3       	in	r24, 0x16	; 22
     a74:	95 b3       	in	r25, 0x15	; 21
     a76:	89 23       	and	r24, r25
     a78:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <PinChange+0x9>
     a7c:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <PinChange+0x8>
     a80:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <PinChange+0x9>
     a84:	89 27       	eor	r24, r25
     a86:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <PinChange+0x7>
     a8a:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <PinChange+0x9>
     a8e:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <PinChange+0x8>
     a92:	c0 e0       	ldi	r28, 0x00	; 0
     a94:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <PinChange+0x6>
     a98:	c8 17       	cp	r28, r24
     a9a:	60 f4       	brcc	.+24     	; 0xab4 <__vector_2+0x66>
     a9c:	ec 2f       	mov	r30, r28
     a9e:	f0 e0       	ldi	r31, 0x00	; 0
     aa0:	ee 0f       	add	r30, r30
     aa2:	ff 1f       	adc	r31, r31
     aa4:	e8 56       	subi	r30, 0x68	; 104
     aa6:	fe 4f       	sbci	r31, 0xFE	; 254
     aa8:	01 90       	ld	r0, Z+
     aaa:	f0 81       	ld	r31, Z
     aac:	e0 2d       	mov	r30, r0
     aae:	09 95       	icall
     ab0:	cf 5f       	subi	r28, 0xFF	; 255
     ab2:	f0 cf       	rjmp	.-32     	; 0xa94 <__vector_2+0x46>
     ab4:	ff 91       	pop	r31
     ab6:	ef 91       	pop	r30
     ab8:	cf 91       	pop	r28
     aba:	bf 91       	pop	r27
     abc:	af 91       	pop	r26
     abe:	9f 91       	pop	r25
     ac0:	8f 91       	pop	r24
     ac2:	7f 91       	pop	r23
     ac4:	6f 91       	pop	r22
     ac6:	5f 91       	pop	r21
     ac8:	4f 91       	pop	r20
     aca:	3f 91       	pop	r19
     acc:	2f 91       	pop	r18
     ace:	0f 90       	pop	r0
     ad0:	0f be       	out	0x3f, r0	; 63
     ad2:	0f 90       	pop	r0
     ad4:	1f 90       	pop	r1
     ad6:	18 95       	reti

00000ad8 <main>:
main():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/main.cpp:4
#include <WProgram.h>

int main(void)
{
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	cd b7       	in	r28, 0x3d	; 61
     ade:	de b7       	in	r29, 0x3e	; 62
     ae0:	a1 97       	sbiw	r28, 0x21	; 33
     ae2:	0f b6       	in	r0, 0x3f	; 63
     ae4:	f8 94       	cli
     ae6:	de bf       	out	0x3e, r29	; 62
     ae8:	0f be       	out	0x3f, r0	; 63
     aea:	cd bf       	out	0x3d, r28	; 61
read_factory_calibration():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring.c:289
#if F_CPU != 16500000L
  // used to detect bootloader applying calibration in init
  byte read_factory_calibration(void)
  {
    byte SIGRD = 5; // for some reason this isn't defined...
    byte value = boot_signature_byte_get(1);
     aec:	81 e2       	ldi	r24, 0x21	; 33
     aee:	e1 e0       	ldi	r30, 0x01	; 1
     af0:	f0 e0       	ldi	r31, 0x00	; 0
     af2:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
     af6:	84 91       	lpm	r24, Z
init():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring.c:303
  #if F_CPU != 16500000L
    // On my Digispark board, micronucleus sets OSCCAL from 82 to 85 (or 58 to 5A) for 16.5 MHz.
    // So do not use the rule of thumb below, since this will lead to a clock being too slow.
    // (I only discovered it, because my serial did not worked with the original code).
    // Restoring just the factory calibration value is more reliable!
    OSCCAL = read_factory_calibration();
     af8:	81 bf       	out	0x31, r24	; 49
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring.c:339
      #warning "Cannot prescale chip to specified F_CPU speed"
    #endif
  #endif

  // this needs to be called before setup() or some functions won't work there
  sei();
     afa:	78 94       	sei
Timer1_SetWaveformGenerationMode():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/core_timers.h:955
}
timer1_wgm_t;

__attribute__((always_inline)) static inline void Timer1_SetWaveformGenerationMode( timer1_wgm_t wgm )
{
  TCCR1 = (TCCR1 & ~MASK1(CTC1)) | ((wgm & 0x1) << CTC1);
     afc:	80 b7       	in	r24, 0x30	; 48
     afe:	80 68       	ori	r24, 0x80	; 128
     b00:	80 bf       	out	0x30, r24	; 48
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/core_timers.h:959

  if ( wgm & _Timer1_Enable_PWM_Mask )
  {
    TCCR1 |= MASK1(PWM1A);
     b02:	80 b7       	in	r24, 0x30	; 48
     b04:	80 64       	ori	r24, 0x40	; 64
     b06:	80 bf       	out	0x30, r24	; 48
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/core_timers.h:960
    GTCCR |= MASK1(PWM1B);
     b08:	8c b5       	in	r24, 0x2c	; 44
     b0a:	80 64       	ori	r24, 0x40	; 64
     b0c:	8c bd       	out	0x2c, r24	; 44
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/core_timers.h:965
  }

  if ( wgm & _Timer1_Set_OCRnC_To_FF_Mask )
  {
    OCR1C = 0xFF;
     b0e:	8f ef       	ldi	r24, 0xFF	; 255
     b10:	8d bd       	out	0x2d, r24	; 45
Timer1_ClockSelect():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/core_timers.h:933
}
timer1_cs_t;

__attribute__((always_inline)) static inline void Timer1_ClockSelect( timer1_cs_t cs )
{
  TCCR1 = (TCCR1 & ~MASK4(CS13,CS12,CS11,CS10)) | (cs << CS10);
     b12:	80 b7       	in	r24, 0x30	; 48
     b14:	80 7f       	andi	r24, 0xF0	; 240
     b16:	87 60       	ori	r24, 0x07	; 7
     b18:	80 bf       	out	0x30, r24	; 48
Timer1_EnableOverflowInterrupt():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/core_timers.h:1024
  TIMSK |= (1<<OCIE1A);
} 

__attribute__((always_inline)) static inline void Timer1_EnableOverflowInterrupt( void )
{
  TIMSK |= (1<<TOIE1);
     b1a:	89 b7       	in	r24, 0x39	; 57
     b1c:	84 60       	ori	r24, 0x04	; 4
     b1e:	89 bf       	out	0x39, r24	; 57
Timer0_ClockSelect():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/core_timers.h:754
}
timer0_cs_t;

__attribute__((always_inline)) static inline void Timer0_ClockSelect( timer0_cs_t cs )
{
  TCCR0B = (TCCR0B & ~MASK3(CS02,CS01,CS00)) | (cs << CS00);
     b20:	83 b7       	in	r24, 0x33	; 51
     b22:	88 7f       	andi	r24, 0xF8	; 248
     b24:	83 bf       	out	0x33, r24	; 51
Timer0_SetWaveformGenerationMode():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/core_timers.h:772
}
timer0_wgm_t;

__attribute__((always_inline)) static inline void Timer0_SetWaveformGenerationMode( timer0_wgm_t wgm )
{
  TCCR0A = (TCCR0A & ~MASK2(WGM01,WGM00)) | (((wgm & B011) >> 0) << WGM00);
     b26:	8a b5       	in	r24, 0x2a	; 42
     b28:	8c 7f       	andi	r24, 0xFC	; 252
     b2a:	81 60       	ori	r24, 0x01	; 1
     b2c:	8a bd       	out	0x2a, r24	; 42
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/core_timers.h:773
  TCCR0B = (TCCR0B & ~MASK1(WGM02))       | (((wgm & B100) >> 2) << WGM02);
     b2e:	83 b7       	in	r24, 0x33	; 51
     b30:	87 7f       	andi	r24, 0xF7	; 247
     b32:	83 bf       	out	0x33, r24	; 51
Timer0_ClockSelect():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/core_timers.h:754
}
timer0_cs_t;

__attribute__((always_inline)) static inline void Timer0_ClockSelect( timer0_cs_t cs )
{
  TCCR0B = (TCCR0B & ~MASK3(CS02,CS01,CS00)) | (cs << CS00);
     b34:	83 b7       	in	r24, 0x33	; 51
     b36:	88 7f       	andi	r24, 0xF8	; 248
     b38:	83 60       	ori	r24, 0x03	; 3
     b3a:	83 bf       	out	0x33, r24	; 51
ADC_PrescalerSelect():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/core_adc.h:82
}
adc_ps_t;

__attribute__((always_inline)) static inline void ADC_PrescalerSelect( adc_ps_t ps )
{
  ADCSRA = (ADCSRA & ~MASK3(ADPS2,ADPS1,ADPS0)) | (ps << ADPS0);
     b3c:	86 b1       	in	r24, 0x06	; 6
     b3e:	87 60       	ori	r24, 0x07	; 7
     b40:	86 b9       	out	0x06, r24	; 6
ADC_Enable():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/core_adc.h:87
}

__attribute__((always_inline)) static inline void ADC_Enable( void )
{
  ADCSRA |= MASK1( ADEN );
     b42:	37 9a       	sbi	0x06, 7	; 6
analogReference():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring_analog.c:44
{
  // can't actually set the register here because the default setting
  // will connect AVCC and the AREF pin, which would cause a short if
  // there's something connected to AREF.
  // fix? Validate the mode?
  analog_reference = mode;
     b44:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <analog_reference>
setup():
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:213


// setup pins, initial state and ensure we are powered off
void setup() {
  analogReference(DEFAULT);            // set analog reference
  pinMode(PB0, OUTPUT);                // relay
     b48:	61 e0       	ldi	r22, 0x01	; 1
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	2e db       	rcall	.-2468   	; 0x1aa <pinMode>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:214
  digitalWrite(PB0, RELAY_OFF);        // ensure relay is of asap
     b4e:	61 e0       	ldi	r22, 0x01	; 1
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	fb da       	rcall	.-2570   	; 0x14a <digitalWrite>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:215
  pinMode(PB1, OUTPUT);                // LED / display DIO
     b54:	61 e0       	ldi	r22, 0x01	; 1
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	28 db       	rcall	.-2480   	; 0x1aa <pinMode>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:216
  pinMode(PB2, OUTPUT);                // display CLK
     b5a:	61 e0       	ldi	r22, 0x01	; 1
     b5c:	82 e0       	ldi	r24, 0x02	; 2
     b5e:	25 db       	rcall	.-2486   	; 0x1aa <pinMode>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:217
  pinMode(PB3, INPUT);                 // RX from PI
     b60:	60 e0       	ldi	r22, 0x00	; 0
     b62:	83 e0       	ldi	r24, 0x03	; 3
     b64:	22 db       	rcall	.-2492   	; 0x1aa <pinMode>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:218
  pinMode(PB4, OUTPUT);                // TX to PI
     b66:	61 e0       	ldi	r22, 0x01	; 1
     b68:	84 e0       	ldi	r24, 0x04	; 4
     b6a:	1f db       	rcall	.-2498   	; 0x1aa <pinMode>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:219
  pinMode(PB5, INPUT);                 // power button
     b6c:	60 e0       	ldi	r22, 0x00	; 0
     b6e:	85 e0       	ldi	r24, 0x05	; 5
     b70:	1c db       	rcall	.-2504   	; 0x1aa <pinMode>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:220
  power_off(false);                    // set to initial state: POWERED_OFF
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	95 de       	rcall	.-726    	; 0x8a0 <power_off(bool)>
check_serial_port():
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:465
      } else if (starts_in_buffer("STATUS", 6)) {
        reset_buffer();
        command = CMD_STATUS;
      } else if (starts_in_buffer("MILLIS", 6)) {
        reset_buffer();
        command = CMD_MILLIS;        
     b76:	3d e4       	ldi	r19, 0x4D	; 77
     b78:	23 2e       	mov	r2, r19
     b7a:	31 2c       	mov	r3, r1
printNumber():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/Print.cpp:268
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
     b7c:	4a e0       	ldi	r20, 0x0A	; 10
     b7e:	44 2e       	mov	r4, r20
     b80:	51 2c       	mov	r5, r1
     b82:	61 2c       	mov	r6, r1
     b84:	71 2c       	mov	r7, r1
loop():
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:567
        set_led(LED_OFF, 0);
      }
    } else if (command == CMD_DISPLAY) {
      // turn on display, turn off led
      swserial.println("display");
      display_mode = TM1637_MODE;
     b86:	bb 24       	eor	r11, r11
     b88:	b3 94       	inc	r11
setBrightness():
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:78
     b8a:	5f e0       	ldi	r21, 0x0F	; 15
     b8c:	a5 2e       	mov	r10, r21
loop():
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:539
      // update power status to powered on
      power_status = POWERED_ON;
    } else if (command == CMD_SHUTDOWN) {
      // received software shutdown command: update power status
      swserial.println("softshutdown");
      power_status = POWERING_OFF;
     b8e:	63 e0       	ldi	r22, 0x03	; 3
     b90:	96 2e       	mov	r9, r22
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:535
        set_led(LED_ON, 0);
      } else {
        display.setSegments(DISPLAY_MSG_ON);
      }
      // update power status to powered on
      power_status = POWERED_ON;
     b92:	72 e0       	ldi	r23, 0x02	; 2
     b94:	87 2e       	mov	r8, r23
millis():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring.c:124
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     b96:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring.c:128

  // disable interrupts while we read millis_timer_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to millis_timer_millis)
  cli();
     b98:	f8 94       	cli
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring.c:129
  m = millis_timer_millis;
     b9a:	c0 90 dd 01 	lds	r12, 0x01DD	; 0x8001dd <millis_timer_millis>
     b9e:	d0 90 de 01 	lds	r13, 0x01DE	; 0x8001de <millis_timer_millis+0x1>
     ba2:	e0 90 df 01 	lds	r14, 0x01DF	; 0x8001df <millis_timer_millis+0x2>
     ba6:	f0 90 e0 01 	lds	r15, 0x01E0	; 0x8001e0 <millis_timer_millis+0x3>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/wiring.c:130
  SREG = oldSREG;
     baa:	8f bf       	out	0x3f, r24	; 63
loop():
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:510

// main loop
void loop() {

  // update reference timestamp
  timestamp = millis();
     bac:	c0 92 d8 01 	sts	0x01D8, r12	; 0x8001d8 <timestamp>
     bb0:	d0 92 d9 01 	sts	0x01D9, r13	; 0x8001d9 <timestamp+0x1>
     bb4:	e0 92 da 01 	sts	0x01DA, r14	; 0x8001da <timestamp+0x2>
     bb8:	f0 92 db 01 	sts	0x01DB, r15	; 0x8001db <timestamp+0x3>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:513

  // update the power led
  if (display_mode == LED_MODE) {
     bbc:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <display_mode>
     bc0:	81 11       	cpse	r24, r1
     bc2:	01 c0       	rjmp	.+2      	; 0xbc6 <main+0xee>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:514
    update_led();
     bc4:	53 dd       	rcall	.-1370   	; 0x66c <update_led()>
check_serial_port():
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:429
}
*/

// check and read commands from the software serial port
void check_serial_port() {
  if (swserial.available() > 0 && command == CMD_NULL) {
     bc6:	8b ee       	ldi	r24, 0xEB	; 235
     bc8:	91 e0       	ldi	r25, 0x01	; 1
     bca:	8a dc       	rcall	.-1772   	; 0x4e0 <SoftSerial::available()>
     bcc:	18 16       	cp	r1, r24
     bce:	19 06       	cpc	r1, r25
     bd0:	0c f0       	brlt	.+2      	; 0xbd4 <main+0xfc>
     bd2:	7b c0       	rjmp	.+246    	; 0xcca <main+0x1f2>
     bd4:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <command>
     bd8:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <command+0x1>
     bdc:	89 2b       	or	r24, r25
     bde:	09 f0       	breq	.+2      	; 0xbe2 <main+0x10a>
     be0:	74 c0       	rjmp	.+232    	; 0xcca <main+0x1f2>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:430
    serial_data = swserial.read();
     be2:	8b ee       	ldi	r24, 0xEB	; 235
     be4:	91 e0       	ldi	r25, 0x01	; 1
     be6:	92 dc       	rcall	.-1756   	; 0x50c <SoftSerial::read()>
     be8:	8c 01       	movw	r16, r24
     bea:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <serial_data+0x1>
     bee:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <serial_data>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:432
    // reset buffer if SERIAL_DELTA_MS passed
    if (timestamp - serial_last_millis >= SERIAL_DELTA_MS) {
     bf2:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <serial_last_millis>
     bf6:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <serial_last_millis+0x1>
     bfa:	a0 91 b6 01 	lds	r26, 0x01B6	; 0x8001b6 <serial_last_millis+0x2>
     bfe:	b0 91 b7 01 	lds	r27, 0x01B7	; 0x8001b7 <serial_last_millis+0x3>
     c02:	a7 01       	movw	r20, r14
     c04:	96 01       	movw	r18, r12
     c06:	28 1b       	sub	r18, r24
     c08:	39 0b       	sbc	r19, r25
     c0a:	4a 0b       	sbc	r20, r26
     c0c:	5b 0b       	sbc	r21, r27
     c0e:	da 01       	movw	r26, r20
     c10:	c9 01       	movw	r24, r18
     c12:	88 3e       	cpi	r24, 0xE8	; 232
     c14:	93 40       	sbci	r25, 0x03	; 3
     c16:	a1 05       	cpc	r26, r1
     c18:	b1 05       	cpc	r27, r1
     c1a:	08 f0       	brcs	.+2      	; 0xc1e <main+0x146>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:433
      reset_buffer();
     c1c:	1b dd       	rcall	.-1482   	; 0x654 <reset_buffer()>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:436
    }
    // reset buffer index to prevent overflow
    if (serial_idx + 1 >= BUF_SIZE) {
     c1e:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <serial_idx>
     c22:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <serial_idx+0x1>
     c26:	0f 97       	sbiw	r24, 0x0f	; 15
     c28:	24 f0       	brlt	.+8      	; 0xc32 <main+0x15a>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:437
      serial_idx = 0;
     c2a:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <serial_idx+0x1>
     c2e:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <serial_idx>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:440
    }
    // check if we have a valid character
    if ((serial_data > 0x1F && serial_data < 0x7F) || serial_data == 0x0A || serial_data == 0x0D) {
     c32:	c8 01       	movw	r24, r16
     c34:	80 97       	sbiw	r24, 0x20	; 32
     c36:	8f 35       	cpi	r24, 0x5F	; 95
     c38:	91 05       	cpc	r25, r1
     c3a:	30 f0       	brcs	.+12     	; 0xc48 <main+0x170>
     c3c:	0a 30       	cpi	r16, 0x0A	; 10
     c3e:	11 05       	cpc	r17, r1
     c40:	19 f0       	breq	.+6      	; 0xc48 <main+0x170>
     c42:	0d 30       	cpi	r16, 0x0D	; 13
     c44:	11 05       	cpc	r17, r1
     c46:	c9 f5       	brne	.+114    	; 0xcba <main+0x1e2>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:442
      // add character to buffer
      serial_buffer[serial_idx] = (char)(serial_data & 0xFF);
     c48:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <serial_idx>
     c4c:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <serial_idx+0x1>
     c50:	fc 01       	movw	r30, r24
     c52:	ee 55       	subi	r30, 0x5E	; 94
     c54:	fe 4f       	sbci	r31, 0xFE	; 254
     c56:	00 83       	st	Z, r16
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:443
      serial_idx++;
     c58:	01 96       	adiw	r24, 0x01	; 1
     c5a:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <serial_idx+0x1>
     c5e:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <serial_idx>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:445
      // check if we have received a command
      if (starts_in_buffer("BOOTOK", 6)) {
     c62:	66 e0       	ldi	r22, 0x06	; 6
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	82 e9       	ldi	r24, 0x92	; 146
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	d6 dc       	rcall	.-1620   	; 0x618 <starts_in_buffer(char const*, int)>
     c6c:	88 23       	and	r24, r24
     c6e:	41 f0       	breq	.+16     	; 0xc80 <main+0x1a8>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:446
        reset_buffer();
     c70:	f1 dc       	rcall	.-1566   	; 0x654 <reset_buffer()>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:447
        command = CMD_BOOTOK;
     c72:	42 e4       	ldi	r20, 0x42	; 66
     c74:	50 e0       	ldi	r21, 0x00	; 0
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:459
      } else if (starts_in_buffer("LED", 3)) {
        reset_buffer();
        command = CMD_LED;
      } else if (starts_in_buffer("DISPLAY", 7)) {
        reset_buffer();
        command = CMD_DISPLAY;
     c76:	50 93 d6 01 	sts	0x01D6, r21	; 0x8001d6 <command+0x1>
     c7a:	40 93 d5 01 	sts	0x01D5, r20	; 0x8001d5 <command>
     c7e:	1d c0       	rjmp	.+58     	; 0xcba <main+0x1e2>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:448
      serial_idx++;
      // check if we have received a command
      if (starts_in_buffer("BOOTOK", 6)) {
        reset_buffer();
        command = CMD_BOOTOK;
      } else if (starts_in_buffer("SHUTDOWN", 8)) {
     c80:	68 e0       	ldi	r22, 0x08	; 8
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	89 e9       	ldi	r24, 0x99	; 153
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	c7 dc       	rcall	.-1650   	; 0x618 <starts_in_buffer(char const*, int)>
     c8a:	88 23       	and	r24, r24
     c8c:	41 f0       	breq	.+16     	; 0xc9e <main+0x1c6>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:449
        reset_buffer();
     c8e:	e2 dc       	rcall	.-1596   	; 0x654 <reset_buffer()>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:450
        command = CMD_SHUTDOWN;
     c90:	83 e5       	ldi	r24, 0x53	; 83
     c92:	90 e0       	ldi	r25, 0x00	; 0
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:462
      } else if (starts_in_buffer("DISPLAY", 7)) {
        reset_buffer();
        command = CMD_DISPLAY;
      } else if (starts_in_buffer("STATUS", 6)) {
        reset_buffer();
        command = CMD_STATUS;
     c94:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <command+0x1>
     c98:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <command>
     c9c:	0e c0       	rjmp	.+28     	; 0xcba <main+0x1e2>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:451
        reset_buffer();
        command = CMD_BOOTOK;
      } else if (starts_in_buffer("SHUTDOWN", 8)) {
        reset_buffer();
        command = CMD_SHUTDOWN;
      } else if (starts_in_buffer("REBOOT", 6)) {
     c9e:	66 e0       	ldi	r22, 0x06	; 6
     ca0:	70 e0       	ldi	r23, 0x00	; 0
     ca2:	82 ea       	ldi	r24, 0xA2	; 162
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	b8 dc       	rcall	.-1680   	; 0x618 <starts_in_buffer(char const*, int)>
     ca8:	88 23       	and	r24, r24
     caa:	31 f1       	breq	.+76     	; 0xcf8 <main+0x220>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:452
        reset_buffer();
     cac:	d3 dc       	rcall	.-1626   	; 0x654 <reset_buffer()>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:453
        command = CMD_REBOOT;
     cae:	e2 e5       	ldi	r30, 0x52	; 82
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	f0 93 d6 01 	sts	0x01D6, r31	; 0x8001d6 <command+0x1>
     cb6:	e0 93 d5 01 	sts	0x01D5, r30	; 0x8001d5 <command>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:476
        reset_buffer();
      } else if (starts_in_buffer("\t", 1)) {
        reset_buffer();
      }
    }
    serial_last_millis = timestamp;
     cba:	c0 92 b4 01 	sts	0x01B4, r12	; 0x8001b4 <serial_last_millis>
     cbe:	d0 92 b5 01 	sts	0x01B5, r13	; 0x8001b5 <serial_last_millis+0x1>
     cc2:	e0 92 b6 01 	sts	0x01B6, r14	; 0x8001b6 <serial_last_millis+0x2>
     cc6:	f0 92 b7 01 	sts	0x01B7, r15	; 0x8001b7 <serial_last_millis+0x3>
loop():
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:521

  // check and read commands from the software serial port
  check_serial_port();

  // handle serial command when available
  if (command != CMD_NULL) {
     cca:	00 91 d5 01 	lds	r16, 0x01D5	; 0x8001d5 <command>
     cce:	10 91 d6 01 	lds	r17, 0x01D6	; 0x8001d6 <command+0x1>
     cd2:	01 15       	cp	r16, r1
     cd4:	11 05       	cpc	r17, r1
     cd6:	09 f4       	brne	.+2      	; 0xcda <main+0x202>
     cd8:	7a c0       	rjmp	.+244    	; 0xdce <main+0x2f6>
serial_flush_input():
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:482
  }
}

// flush serial input buffer
void serial_flush_input() {
  while (swserial.available() > 0) {
     cda:	8b ee       	ldi	r24, 0xEB	; 235
     cdc:	91 e0       	ldi	r25, 0x01	; 1
     cde:	00 dc       	rcall	.-2048   	; 0x4e0 <SoftSerial::available()>
     ce0:	18 16       	cp	r1, r24
     ce2:	19 06       	cpc	r1, r25
     ce4:	0c f0       	brlt	.+2      	; 0xce8 <main+0x210>
     ce6:	5a c0       	rjmp	.+180    	; 0xd9c <main+0x2c4>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:483
    serial_data = swserial.read();
     ce8:	8b ee       	ldi	r24, 0xEB	; 235
     cea:	91 e0       	ldi	r25, 0x01	; 1
     cec:	0f dc       	rcall	.-2018   	; 0x50c <SoftSerial::read()>
     cee:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <serial_data+0x1>
     cf2:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <serial_data>
     cf6:	f1 cf       	rjmp	.-30     	; 0xcda <main+0x202>
check_serial_port():
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:454
        reset_buffer();
        command = CMD_SHUTDOWN;
      } else if (starts_in_buffer("REBOOT", 6)) {
        reset_buffer();
        command = CMD_REBOOT;
      } else if (starts_in_buffer("LED", 3)) {
     cf8:	63 e0       	ldi	r22, 0x03	; 3
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	89 ea       	ldi	r24, 0xA9	; 169
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	8b dc       	rcall	.-1770   	; 0x618 <starts_in_buffer(char const*, int)>
     d02:	88 23       	and	r24, r24
     d04:	41 f0       	breq	.+16     	; 0xd16 <main+0x23e>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:455
        reset_buffer();
     d06:	a6 dc       	rcall	.-1716   	; 0x654 <reset_buffer()>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:456
        command = CMD_LED;
     d08:	2c e4       	ldi	r18, 0x4C	; 76
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	30 93 d6 01 	sts	0x01D6, r19	; 0x8001d6 <command+0x1>
     d10:	20 93 d5 01 	sts	0x01D5, r18	; 0x8001d5 <command>
     d14:	d2 cf       	rjmp	.-92     	; 0xcba <main+0x1e2>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:457
      } else if (starts_in_buffer("DISPLAY", 7)) {
     d16:	67 e0       	ldi	r22, 0x07	; 7
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	8d ea       	ldi	r24, 0xAD	; 173
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	7c dc       	rcall	.-1800   	; 0x618 <starts_in_buffer(char const*, int)>
     d20:	88 23       	and	r24, r24
     d22:	21 f0       	breq	.+8      	; 0xd2c <main+0x254>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:458
        reset_buffer();
     d24:	97 dc       	rcall	.-1746   	; 0x654 <reset_buffer()>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:459
        command = CMD_DISPLAY;
     d26:	44 e4       	ldi	r20, 0x44	; 68
     d28:	50 e0       	ldi	r21, 0x00	; 0
     d2a:	a5 cf       	rjmp	.-182    	; 0xc76 <main+0x19e>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:460
      } else if (starts_in_buffer("STATUS", 6)) {
     d2c:	66 e0       	ldi	r22, 0x06	; 6
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	85 eb       	ldi	r24, 0xB5	; 181
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	71 dc       	rcall	.-1822   	; 0x618 <starts_in_buffer(char const*, int)>
     d36:	88 23       	and	r24, r24
     d38:	21 f0       	breq	.+8      	; 0xd42 <main+0x26a>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:461
        reset_buffer();
     d3a:	8c dc       	rcall	.-1768   	; 0x654 <reset_buffer()>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:462
        command = CMD_STATUS;
     d3c:	87 e4       	ldi	r24, 0x47	; 71
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	a9 cf       	rjmp	.-174    	; 0xc94 <main+0x1bc>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:463
      } else if (starts_in_buffer("MILLIS", 6)) {
     d42:	66 e0       	ldi	r22, 0x06	; 6
     d44:	70 e0       	ldi	r23, 0x00	; 0
     d46:	8c eb       	ldi	r24, 0xBC	; 188
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	66 dc       	rcall	.-1844   	; 0x618 <starts_in_buffer(char const*, int)>
     d4c:	88 23       	and	r24, r24
     d4e:	31 f0       	breq	.+12     	; 0xd5c <main+0x284>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:464
        reset_buffer();
     d50:	81 dc       	rcall	.-1790   	; 0x654 <reset_buffer()>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:465
        command = CMD_MILLIS;        
     d52:	30 92 d6 01 	sts	0x01D6, r3	; 0x8001d6 <command+0x1>
     d56:	20 92 d5 01 	sts	0x01D5, r2	; 0x8001d5 <command>
     d5a:	af cf       	rjmp	.-162    	; 0xcba <main+0x1e2>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:466
      } else if (starts_in_buffer(" ", 1)) {
     d5c:	61 e0       	ldi	r22, 0x01	; 1
     d5e:	70 e0       	ldi	r23, 0x00	; 0
     d60:	83 ec       	ldi	r24, 0xC3	; 195
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	59 dc       	rcall	.-1870   	; 0x618 <starts_in_buffer(char const*, int)>
     d66:	88 23       	and	r24, r24
     d68:	11 f0       	breq	.+4      	; 0xd6e <main+0x296>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:467
        reset_buffer();
     d6a:	74 dc       	rcall	.-1816   	; 0x654 <reset_buffer()>
     d6c:	a6 cf       	rjmp	.-180    	; 0xcba <main+0x1e2>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:468
      } else if (starts_in_buffer("\n", 1)) {
     d6e:	61 e0       	ldi	r22, 0x01	; 1
     d70:	70 e0       	ldi	r23, 0x00	; 0
     d72:	85 ec       	ldi	r24, 0xC5	; 197
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	50 dc       	rcall	.-1888   	; 0x618 <starts_in_buffer(char const*, int)>
     d78:	81 11       	cpse	r24, r1
     d7a:	f7 cf       	rjmp	.-18     	; 0xd6a <main+0x292>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:470
        reset_buffer();
      } else if (starts_in_buffer("\r", 1)) {
     d7c:	61 e0       	ldi	r22, 0x01	; 1
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	87 ec       	ldi	r24, 0xC7	; 199
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	49 dc       	rcall	.-1902   	; 0x618 <starts_in_buffer(char const*, int)>
     d86:	81 11       	cpse	r24, r1
     d88:	f0 cf       	rjmp	.-32     	; 0xd6a <main+0x292>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:472
        reset_buffer();
      } else if (starts_in_buffer("\t", 1)) {
     d8a:	61 e0       	ldi	r22, 0x01	; 1
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	89 ec       	ldi	r24, 0xC9	; 201
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	42 dc       	rcall	.-1916   	; 0x618 <starts_in_buffer(char const*, int)>
     d94:	88 23       	and	r24, r24
     d96:	09 f4       	brne	.+2      	; 0xd9a <main+0x2c2>
     d98:	90 cf       	rjmp	.-224    	; 0xcba <main+0x1e2>
     d9a:	e7 cf       	rjmp	.-50     	; 0xd6a <main+0x292>
loop():
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:524

  // handle serial command when available
  if (command != CMD_NULL) {
    // flush serial input buffer
    serial_flush_input();
    if (command == CMD_BOOTOK) {
     d9c:	02 34       	cpi	r16, 0x42	; 66
     d9e:	11 05       	cpc	r17, r1
     da0:	09 f0       	breq	.+2      	; 0xda4 <main+0x2cc>
     da2:	36 c1       	rjmp	.+620    	; 0x1010 <main+0x538>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:527
      // boot sequence completed
      // confirm with bootok message
      swserial.println("bootok");
     da4:	8b ec       	ldi	r24, 0xCB	; 203
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	66 dd       	rcall	.-1332   	; 0x876 <Print::println(char const*) [clone .constprop.19]>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:529
      // confirm with led continous on or "on" message on the display
      if (display_mode == LED_MODE) {
     daa:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <display_mode>
     dae:	81 11       	cpse	r24, r1
     db0:	2b c1       	rjmp	.+598    	; 0x1008 <main+0x530>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:530
        set_led(LED_ON, 0);
     db2:	40 e0       	ldi	r20, 0x00	; 0
     db4:	50 e0       	ldi	r21, 0x00	; 0
     db6:	ba 01       	movw	r22, r20
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	c4 dc       	rcall	.-1656   	; 0x744 <set_led(unsigned char, unsigned long)>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:535
      } else {
        display.setSegments(DISPLAY_MSG_ON);
      }
      // update power status to powered on
      power_status = POWERED_ON;
     dbc:	80 92 d4 01 	sts	0x01D4, r8	; 0x8001d4 <power_status>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:584
    } else if (command == CMD_MILLIS) {
      // send elapsed time in milliseconds
      swserial.println(timestamp, DEC);
    }
    // flush serial output
    swserial.flush();
     dc0:	8b ee       	ldi	r24, 0xEB	; 235
     dc2:	91 e0       	ldi	r25, 0x01	; 1
     dc4:	7e db       	rcall	.-2308   	; 0x4c2 <SoftSerial::flush()>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:585
    command = CMD_NULL;
     dc6:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <command+0x1>
     dca:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <command>
check_power_button():
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:310
  update_led();
}

// read and update the state of the power button and the power status
void check_power_button() {
  if (timestamp - last_button_millis >= BUTTON_DELAY_MS) {
     dce:	c0 90 d8 01 	lds	r12, 0x01D8	; 0x8001d8 <timestamp>
     dd2:	d0 90 d9 01 	lds	r13, 0x01D9	; 0x8001d9 <timestamp+0x1>
     dd6:	e0 90 da 01 	lds	r14, 0x01DA	; 0x8001da <timestamp+0x2>
     dda:	f0 90 db 01 	lds	r15, 0x01DB	; 0x8001db <timestamp+0x3>
     dde:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <last_button_millis>
     de2:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <last_button_millis+0x1>
     de6:	a0 91 c0 01 	lds	r26, 0x01C0	; 0x8001c0 <last_button_millis+0x2>
     dea:	b0 91 c1 01 	lds	r27, 0x01C1	; 0x8001c1 <last_button_millis+0x3>
     dee:	a7 01       	movw	r20, r14
     df0:	96 01       	movw	r18, r12
     df2:	28 1b       	sub	r18, r24
     df4:	39 0b       	sbc	r19, r25
     df6:	4a 0b       	sbc	r20, r26
     df8:	5b 0b       	sbc	r21, r27
     dfa:	da 01       	movw	r26, r20
     dfc:	c9 01       	movw	r24, r18
     dfe:	05 97       	sbiw	r24, 0x05	; 5
     e00:	a1 05       	cpc	r26, r1
     e02:	b1 05       	cpc	r27, r1
     e04:	08 f4       	brcc	.+2      	; 0xe08 <main+0x330>
     e06:	53 c0       	rjmp	.+166    	; 0xeae <main+0x3d6>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:312
    // take a sample
    button_aval = analogRead(BUTTON_PIN);
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	a7 da       	rcall	.-2738   	; 0x35a <analogRead>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:313
    if (button_aval < BUTTON_REFERENCE_VALUE) {
     e0c:	82 3a       	cpi	r24, 0xA2	; 162
     e0e:	93 40       	sbci	r25, 0x03	; 3
     e10:	0c f0       	brlt	.+2      	; 0xe14 <main+0x33c>
     e12:	b5 c1       	rjmp	.+874    	; 0x117e <main+0x6a6>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:314
      button_dval = BUTTON_PRESSED;
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <button_dval+0x1>
     e1c:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <button_dval>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:321
      button_dval = BUTTON_RELEASED;
    }

    // process last set of samples
    int sum_of_states = 0;
    button_states <<= 1;
     e20:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <button_states>
     e24:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <button_states+0x1>
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:322
    button_states |= button_dval;
     e2c:	20 91 bc 01 	lds	r18, 0x01BC	; 0x8001bc <button_dval>
     e30:	30 91 bd 01 	lds	r19, 0x01BD	; 0x8001bd <button_dval+0x1>
     e34:	82 2b       	or	r24, r18
     e36:	93 2b       	or	r25, r19
     e38:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <button_states+0x1>
     e3c:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <button_states>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:323
    sum_of_states = __builtin_popcount(button_states);
     e40:	96 d4       	rcall	.+2348   	; 0x176e <__popcounthi2>
     e42:	9c 01       	movw	r18, r24
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:326

    // update button status
    if (button_status == BUTTON_IDLE && sum_of_states >= 10 && (timestamp - button_released_millis >= SHORT_PRESS_MS || button_released_millis == 0)) {
     e44:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <button_status>
     e48:	92 30       	cpi	r25, 0x02	; 2
     e4a:	09 f0       	breq	.+2      	; 0xe4e <main+0x376>
     e4c:	9d c1       	rjmp	.+826    	; 0x1188 <main+0x6b0>
     e4e:	2a 30       	cpi	r18, 0x0A	; 10
     e50:	31 05       	cpc	r19, r1
     e52:	2c f1       	brlt	.+74     	; 0xe9e <main+0x3c6>
     e54:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <button_released_millis>
     e58:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <button_released_millis+0x1>
     e5c:	a0 91 ce 01 	lds	r26, 0x01CE	; 0x8001ce <button_released_millis+0x2>
     e60:	b0 91 cf 01 	lds	r27, 0x01CF	; 0x8001cf <button_released_millis+0x3>
     e64:	b7 01       	movw	r22, r14
     e66:	a6 01       	movw	r20, r12
     e68:	48 1b       	sub	r20, r24
     e6a:	59 0b       	sbc	r21, r25
     e6c:	6a 0b       	sbc	r22, r26
     e6e:	7b 0b       	sbc	r23, r27
     e70:	40 3d       	cpi	r20, 0xD0	; 208
     e72:	57 40       	sbci	r21, 0x07	; 7
     e74:	61 05       	cpc	r22, r1
     e76:	71 05       	cpc	r23, r1
     e78:	20 f4       	brcc	.+8      	; 0xe82 <main+0x3aa>
     e7a:	89 2b       	or	r24, r25
     e7c:	8a 2b       	or	r24, r26
     e7e:	8b 2b       	or	r24, r27
     e80:	71 f4       	brne	.+28     	; 0xe9e <main+0x3c6>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:328
      // button press confirmed
      button_pressed_millis = timestamp;
     e82:	c0 92 d0 01 	sts	0x01D0, r12	; 0x8001d0 <button_pressed_millis>
     e86:	d0 92 d1 01 	sts	0x01D1, r13	; 0x8001d1 <button_pressed_millis+0x1>
     e8a:	e0 92 d2 01 	sts	0x01D2, r14	; 0x8001d2 <button_pressed_millis+0x2>
     e8e:	f0 92 d3 01 	sts	0x01D3, r15	; 0x8001d3 <button_pressed_millis+0x3>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:329
      button_status = BUTTON_PRESSED;
     e92:	b0 92 61 00 	sts	0x0061, r11	; 0x800061 <button_status>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:335
      button_states = 0;
    } else if (button_status == BUTTON_PRESSED && sum_of_states == 0) {
      // button release confirmed
      button_released_millis = timestamp;
      button_status = BUTTON_RELEASED;
      button_states = 0;
     e96:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <button_states+0x1>
     e9a:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <button_states>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:352
      button_status = BUTTON_IDLE;
      button_states = 0;
    }

    // keep timestamp for next iteration
    last_button_millis = timestamp;
     e9e:	c0 92 be 01 	sts	0x01BE, r12	; 0x8001be <last_button_millis>
     ea2:	d0 92 bf 01 	sts	0x01BF, r13	; 0x8001bf <last_button_millis+0x1>
     ea6:	e0 92 c0 01 	sts	0x01C0, r14	; 0x8001c0 <last_button_millis+0x2>
     eaa:	f0 92 c1 01 	sts	0x01C1, r15	; 0x8001c1 <last_button_millis+0x3>
loop():
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:592

  // check the status of the power button
  check_power_button();

  // update state based on the button status and the time the button is pressed
  if (button_status == BUTTON_PRESSED && timestamp - button_pressed_millis >= LONG_PRESS_MS) {
     eae:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <button_status>
     eb2:	81 30       	cpi	r24, 0x01	; 1
     eb4:	09 f0       	breq	.+2      	; 0xeb8 <main+0x3e0>
     eb6:	a7 c1       	rjmp	.+846    	; 0x1206 <main+0x72e>
     eb8:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <button_pressed_millis>
     ebc:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <button_pressed_millis+0x1>
     ec0:	a0 91 d2 01 	lds	r26, 0x01D2	; 0x8001d2 <button_pressed_millis+0x2>
     ec4:	b0 91 d3 01 	lds	r27, 0x01D3	; 0x8001d3 <button_pressed_millis+0x3>
     ec8:	a7 01       	movw	r20, r14
     eca:	96 01       	movw	r18, r12
     ecc:	28 1b       	sub	r18, r24
     ece:	39 0b       	sbc	r19, r25
     ed0:	4a 0b       	sbc	r20, r26
     ed2:	5b 0b       	sbc	r21, r27
     ed4:	da 01       	movw	r26, r20
     ed6:	c9 01       	movw	r24, r18
     ed8:	84 39       	cpi	r24, 0x94	; 148
     eda:	91 41       	sbci	r25, 0x11	; 17
     edc:	a1 05       	cpc	r26, r1
     ede:	b1 05       	cpc	r27, r1
     ee0:	28 f0       	brcs	.+10     	; 0xeec <main+0x414>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:594
    // long button press detected
    power_status = HARD_SHUTDOWN;
     ee2:	85 e0       	ldi	r24, 0x05	; 5
     ee4:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <power_status>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:595
    button_status = BUTTON_WAIT_RELEASE;
     ee8:	90 92 61 00 	sts	0x0061, r9	; 0x800061 <button_status>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:607
    }
    button_status = BUTTON_IDLE;
  }

  // power state handling
  if (power_status == POWERING_ON) {
     eec:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <power_status>
     ef0:	81 30       	cpi	r24, 0x01	; 1
     ef2:	09 f0       	breq	.+2      	; 0xef6 <main+0x41e>
     ef4:	c4 c1       	rjmp	.+904    	; 0x127e <main+0x7a6>
power_on():
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:225
  power_off(false);                    // set to initial state: POWERED_OFF
}

// power pi on
void power_on() {
  if (relay_status == RELAY_OFF) {
     ef6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     efa:	81 30       	cpi	r24, 0x01	; 1
     efc:	09 f0       	breq	.+2      	; 0xf00 <main+0x428>
     efe:	4b ce       	rjmp	.-874    	; 0xb96 <main+0xbe>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:226
    if (display_mode == LED_MODE) {
     f00:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <display_mode>
     f04:	81 11       	cpse	r24, r1
     f06:	aa c1       	rjmp	.+852    	; 0x125c <main+0x784>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:227
      set_led(LED_BLINK_CONT_OFF, BLINK_DELAY_MS);
     f08:	4a ef       	ldi	r20, 0xFA	; 250
     f0a:	50 e0       	ldi	r21, 0x00	; 0
     f0c:	60 e0       	ldi	r22, 0x00	; 0
     f0e:	70 e0       	ldi	r23, 0x00	; 0
     f10:	84 e0       	ldi	r24, 0x04	; 4
     f12:	18 dc       	rcall	.-2000   	; 0x744 <set_led(unsigned char, unsigned long)>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:233
    } else {
      display.setBrightness(DISPLAY_BRIGHTNESS, true);
      display.clear();
      display.setSegments(DISPLAY_MSG_BOOT);
    }
    digitalWrite(RELAY_PIN, RELAY_ON);
     f14:	60 e0       	ldi	r22, 0x00	; 0
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	18 d9       	rcall	.-3536   	; 0x14a <digitalWrite>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:234
    relay_status = RELAY_ON;
     f1a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
begin():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:425
// Public methods
//

void SoftSerial::begin(long speed)
{
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
     f1e:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <swserial+0x12>
     f22:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <swserial+0x11>
     f26:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <swserial+0x10>
     f2a:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <swserial+0xf>
     f2e:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <swserial+0xe>
     f32:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <swserial+0xd>
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:429

  for (unsigned i=0; i<sizeof(table)/sizeof(table[0]); ++i)
  {
    long baud = pgm_read_dword(&table[i].baud);
     f3a:	fc 01       	movw	r30, r24
     f3c:	e2 5e       	subi	r30, 0xE2	; 226
     f3e:	ff 4f       	sbci	r31, 0xFF	; 255
     f40:	45 91       	lpm	r20, Z+
     f42:	55 91       	lpm	r21, Z+
     f44:	65 91       	lpm	r22, Z+
     f46:	74 91       	lpm	r23, Z
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:430
    if (baud == speed)
     f48:	40 38       	cpi	r20, 0x80	; 128
     f4a:	55 42       	sbci	r21, 0x25	; 37
     f4c:	61 05       	cpc	r22, r1
     f4e:	71 05       	cpc	r23, r1
     f50:	09 f0       	breq	.+2      	; 0xf54 <main+0x47c>
     f52:	8b c1       	rjmp	.+790    	; 0x126a <main+0x792>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:432
    {
      _rx_delay_centering = pgm_read_word(&table[i].rx_delay_centering);
     f54:	fc 01       	movw	r30, r24
     f56:	ee 5d       	subi	r30, 0xDE	; 222
     f58:	ff 4f       	sbci	r31, 0xFF	; 255
     f5a:	25 91       	lpm	r18, Z+
     f5c:	34 91       	lpm	r19, Z
     f5e:	30 93 f7 01 	sts	0x01F7, r19	; 0x8001f7 <swserial+0xc>
     f62:	20 93 f6 01 	sts	0x01F6, r18	; 0x8001f6 <swserial+0xb>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:433
      _rx_delay_intrabit = pgm_read_word(&table[i].rx_delay_intrabit);
     f66:	fc 01       	movw	r30, r24
     f68:	ec 5d       	subi	r30, 0xDC	; 220
     f6a:	ff 4f       	sbci	r31, 0xFF	; 255
     f6c:	25 91       	lpm	r18, Z+
     f6e:	34 91       	lpm	r19, Z
     f70:	30 93 f9 01 	sts	0x01F9, r19	; 0x8001f9 <swserial+0xe>
     f74:	20 93 f8 01 	sts	0x01F8, r18	; 0x8001f8 <swserial+0xd>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:434
      _rx_delay_stopbit = pgm_read_word(&table[i].rx_delay_stopbit);
     f78:	fc 01       	movw	r30, r24
     f7a:	ea 5d       	subi	r30, 0xDA	; 218
     f7c:	ff 4f       	sbci	r31, 0xFF	; 255
     f7e:	25 91       	lpm	r18, Z+
     f80:	34 91       	lpm	r19, Z
     f82:	30 93 fb 01 	sts	0x01FB, r19	; 0x8001fb <swserial+0x10>
     f86:	20 93 fa 01 	sts	0x01FA, r18	; 0x8001fa <swserial+0xf>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:435
      _tx_delay = pgm_read_word(&table[i].tx_delay);
     f8a:	fc 01       	movw	r30, r24
     f8c:	e8 5d       	subi	r30, 0xD8	; 216
     f8e:	ff 4f       	sbci	r31, 0xFF	; 255
     f90:	85 91       	lpm	r24, Z+
     f92:	94 91       	lpm	r25, Z
     f94:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <swserial+0x12>
     f98:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <swserial+0x11>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:441
      break;
    }
  }

  // Set up RX interrupts, but only if we have a valid RX baud rate
  if (_rx_delay_stopbit)
     f9c:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <swserial+0xf>
     fa0:	90 91 fb 01 	lds	r25, 0x01FB	; 0x8001fb <swserial+0x10>
     fa4:	89 2b       	or	r24, r25
     fa6:	a9 f0       	breq	.+42     	; 0xfd2 <main+0x4fa>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:443
  {
    if (digitalPinToPCICR(_receivePin))
     fa8:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <swserial+0x4>
     fac:	96 30       	cpi	r25, 0x06	; 6
     fae:	60 f4       	brcc	.+24     	; 0xfc8 <main+0x4f0>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:445
    {
      *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
     fb0:	8b b7       	in	r24, 0x3b	; 59
     fb2:	80 62       	ori	r24, 0x20	; 32
     fb4:	8b bf       	out	0x3b, r24	; 59
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:446
      *digitalPinToPCMSK(_receivePin) |= _BV(digitalPinToPCMSKbit(_receivePin));
     fb6:	85 b3       	in	r24, 0x15	; 21
     fb8:	21 e0       	ldi	r18, 0x01	; 1
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	01 c0       	rjmp	.+2      	; 0xfc0 <main+0x4e8>
     fbe:	22 0f       	add	r18, r18
     fc0:	9a 95       	dec	r25
     fc2:	ea f7       	brpl	.-6      	; 0xfbe <main+0x4e6>
     fc4:	82 2b       	or	r24, r18
     fc6:	85 bb       	out	0x15, r24	; 21
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:448
    }
    tunedDelay(_tx_delay); // if we were low this establishes the end
     fc8:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <swserial+0x11>
     fcc:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <swserial+0x12>
     fd0:	be da       	rcall	.-2692   	; 0x54e <SoftSerial::tunedDelay(unsigned int)>
listen():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:220

// This function sets the current object as the "listening"
// one and returns true if it replaces another 
bool SoftSerial::listen()
{
  if (active_object != this)
     fd2:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <SoftSerial::active_object>
     fd6:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <SoftSerial::active_object+0x1>
     fda:	8b 5e       	subi	r24, 0xEB	; 235
     fdc:	91 40       	sbci	r25, 0x01	; 1
     fde:	09 f4       	brne	.+2      	; 0xfe2 <main+0x50a>
     fe0:	da cd       	rjmp	.-1100   	; 0xb96 <main+0xbe>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:222
  {
    _buffer_overflow = false;
     fe2:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <swserial+0x13>
     fe6:	8e 7f       	andi	r24, 0xFE	; 254
     fe8:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <swserial+0x13>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:223
    uint8_t oldSREG = SREG;
     fec:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:224
    cli();
     fee:	f8 94       	cli
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:225
    _receive_buffer_head = _receive_buffer_tail = 0;
     ff0:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <SoftSerial::_receive_buffer_tail>
     ff4:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <SoftSerial::_receive_buffer_head>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:226
    active_object = this;
     ff8:	2b ee       	ldi	r18, 0xEB	; 235
     ffa:	31 e0       	ldi	r19, 0x01	; 1
     ffc:	30 93 c5 01 	sts	0x01C5, r19	; 0x8001c5 <SoftSerial::active_object+0x1>
    1000:	20 93 c4 01 	sts	0x01C4, r18	; 0x8001c4 <SoftSerial::active_object>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:227
    SREG = oldSREG;
    1004:	8f bf       	out	0x3f, r24	; 63
    1006:	c7 cd       	rjmp	.-1138   	; 0xb96 <main+0xbe>
loop():
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:532
      swserial.println("bootok");
      // confirm with led continous on or "on" message on the display
      if (display_mode == LED_MODE) {
        set_led(LED_ON, 0);
      } else {
        display.setSegments(DISPLAY_MSG_ON);
    1008:	8e e8       	ldi	r24, 0x8E	; 142
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	72 d9       	rcall	.-3356   	; 0x2f2 <TM1637Display::setSegments(unsigned char const*, unsigned char, unsigned char) [clone .constprop.13]>
    100e:	d6 ce       	rjmp	.-596    	; 0xdbc <main+0x2e4>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:536
      }
      // update power status to powered on
      power_status = POWERED_ON;
    } else if (command == CMD_SHUTDOWN) {
    1010:	03 35       	cpi	r16, 0x53	; 83
    1012:	11 05       	cpc	r17, r1
    1014:	31 f4       	brne	.+12     	; 0x1022 <main+0x54a>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:538
      // received software shutdown command: update power status
      swserial.println("softshutdown");
    1016:	82 ed       	ldi	r24, 0xD2	; 210
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	2d dc       	rcall	.-1958   	; 0x876 <Print::println(char const*) [clone .constprop.19]>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:539
      power_status = POWERING_OFF;
    101c:	90 92 d4 01 	sts	0x01D4, r9	; 0x8001d4 <power_status>
    1020:	cf ce       	rjmp	.-610    	; 0xdc0 <main+0x2e8>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:540
    } else if (command == CMD_REBOOT) {
    1022:	02 35       	cpi	r16, 0x52	; 82
    1024:	11 05       	cpc	r17, r1
    1026:	b9 f4       	brne	.+46     	; 0x1056 <main+0x57e>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:542
      // received software reboot command: update power status
      swserial.println("softreboot");
    1028:	8f ed       	ldi	r24, 0xDF	; 223
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	24 dc       	rcall	.-1976   	; 0x876 <Print::println(char const*) [clone .constprop.19]>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:543
      if (display_mode == LED_MODE) {
    102e:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <display_mode>
    1032:	81 11       	cpse	r24, r1
    1034:	09 c0       	rjmp	.+18     	; 0x1048 <main+0x570>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:544
        set_led(LED_BLINK_CONT_OFF, BLINK_DELAY_MS);
    1036:	4a ef       	ldi	r20, 0xFA	; 250
    1038:	50 e0       	ldi	r21, 0x00	; 0
    103a:	60 e0       	ldi	r22, 0x00	; 0
    103c:	70 e0       	ldi	r23, 0x00	; 0
    103e:	84 e0       	ldi	r24, 0x04	; 4
    1040:	81 db       	rcall	.-2302   	; 0x744 <set_led(unsigned char, unsigned long)>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:550
      } else {
        display.setBrightness(DISPLAY_BRIGHTNESS, true);
        display.clear();
        display.setSegments(DISPLAY_MSG_BOOT);
      }
      power_status = POWERING_ON;
    1042:	b0 92 d4 01 	sts	0x01D4, r11	; 0x8001d4 <power_status>
    1046:	bc ce       	rjmp	.-648    	; 0xdc0 <main+0x2e8>
setBrightness():
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:78
    1048:	a0 92 e8 01 	sts	0x01E8, r10	; 0x8001e8 <display+0x2>
loop():
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:547
      swserial.println("softreboot");
      if (display_mode == LED_MODE) {
        set_led(LED_BLINK_CONT_OFF, BLINK_DELAY_MS);
      } else {
        display.setBrightness(DISPLAY_BRIGHTNESS, true);
        display.clear();
    104c:	72 d9       	rcall	.-3356   	; 0x332 <TM1637Display::clear() [clone .constprop.12]>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:548
        display.setSegments(DISPLAY_MSG_BOOT);
    104e:	8a e8       	ldi	r24, 0x8A	; 138
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	4f d9       	rcall	.-3426   	; 0x2f2 <TM1637Display::setSegments(unsigned char const*, unsigned char, unsigned char) [clone .constprop.13]>
    1054:	f6 cf       	rjmp	.-20     	; 0x1042 <main+0x56a>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:551
      }
      power_status = POWERING_ON;
    } else if (command == CMD_LED) {
    1056:	0c 34       	cpi	r16, 0x4C	; 76
    1058:	11 05       	cpc	r17, r1
    105a:	e9 f4       	brne	.+58     	; 0x1096 <main+0x5be>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:553
      // turn on led, turn off display
      swserial.println("led");
    105c:	8a ee       	ldi	r24, 0xEA	; 234
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	0a dc       	rcall	.-2028   	; 0x876 <Print::println(char const*) [clone .constprop.19]>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:554
      display_mode = LED_MODE;
    1062:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <display_mode>
setBrightness():
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:78
    1066:	97 e0       	ldi	r25, 0x07	; 7
    1068:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <display+0x2>
loop():
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:556
      display.setBrightness(DISPLAY_BRIGHTNESS, false);
      display.clear();
    106c:	62 d9       	rcall	.-3388   	; 0x332 <TM1637Display::clear() [clone .constprop.12]>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:557
      if (power_status == POWERING_ON) {
    106e:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <power_status>
    1072:	81 30       	cpi	r24, 0x01	; 1
    1074:	39 f4       	brne	.+14     	; 0x1084 <main+0x5ac>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:558
        set_led(LED_BLINK_CONT_OFF, BLINK_DELAY_MS);
    1076:	4a ef       	ldi	r20, 0xFA	; 250
    1078:	50 e0       	ldi	r21, 0x00	; 0
    107a:	60 e0       	ldi	r22, 0x00	; 0
    107c:	70 e0       	ldi	r23, 0x00	; 0
    107e:	84 e0       	ldi	r24, 0x04	; 4
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:560
      } else if (power_status == POWERED_ON) {
        set_led(LED_ON, 0);
    1080:	61 db       	rcall	.-2366   	; 0x744 <set_led(unsigned char, unsigned long)>
    1082:	9e ce       	rjmp	.-708    	; 0xdc0 <main+0x2e8>
    1084:	40 e0       	ldi	r20, 0x00	; 0
    1086:	50 e0       	ldi	r21, 0x00	; 0
    1088:	ba 01       	movw	r22, r20
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:559
      display_mode = LED_MODE;
      display.setBrightness(DISPLAY_BRIGHTNESS, false);
      display.clear();
      if (power_status == POWERING_ON) {
        set_led(LED_BLINK_CONT_OFF, BLINK_DELAY_MS);
      } else if (power_status == POWERED_ON) {
    108a:	82 30       	cpi	r24, 0x02	; 2
    108c:	11 f4       	brne	.+4      	; 0x1092 <main+0x5ba>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:560
        set_led(LED_ON, 0);
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	f7 cf       	rjmp	.-18     	; 0x1080 <main+0x5a8>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:562
      } else {
        set_led(LED_OFF, 0);
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	f5 cf       	rjmp	.-22     	; 0x1080 <main+0x5a8>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:564
      }
    } else if (command == CMD_DISPLAY) {
    1096:	04 34       	cpi	r16, 0x44	; 68
    1098:	11 05       	cpc	r17, r1
    109a:	d9 f4       	brne	.+54     	; 0x10d2 <main+0x5fa>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:566
      // turn on display, turn off led
      swserial.println("display");
    109c:	8e ee       	ldi	r24, 0xEE	; 238
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	ea db       	rcall	.-2092   	; 0x876 <Print::println(char const*) [clone .constprop.19]>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:567
      display_mode = TM1637_MODE;
    10a2:	b0 92 d7 01 	sts	0x01D7, r11	; 0x8001d7 <display_mode>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:568
      set_led(LED_OFF, 0);
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	ba 01       	movw	r22, r20
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	4a db       	rcall	.-2412   	; 0x744 <set_led(unsigned char, unsigned long)>
setBrightness():
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:78
    10b0:	a0 92 e8 01 	sts	0x01E8, r10	; 0x8001e8 <display+0x2>
loop():
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:570
      display.setBrightness(DISPLAY_BRIGHTNESS, true);
      display.clear();
    10b4:	3e d9       	rcall	.-3460   	; 0x332 <TM1637Display::clear() [clone .constprop.12]>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:571
      if (power_status == POWERING_ON) {
    10b6:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <power_status>
    10ba:	81 30       	cpi	r24, 0x01	; 1
    10bc:	21 f4       	brne	.+8      	; 0x10c6 <main+0x5ee>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:572
        display.setSegments(DISPLAY_MSG_BOOT);
    10be:	8a e8       	ldi	r24, 0x8A	; 138
    10c0:	90 e0       	ldi	r25, 0x00	; 0
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:574
      } else if (power_status == POWERED_ON) {
        display.setSegments(DISPLAY_MSG_ON);
    10c2:	17 d9       	rcall	.-3538   	; 0x2f2 <TM1637Display::setSegments(unsigned char const*, unsigned char, unsigned char) [clone .constprop.13]>
    10c4:	7d ce       	rjmp	.-774    	; 0xdc0 <main+0x2e8>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:573
      set_led(LED_OFF, 0);
      display.setBrightness(DISPLAY_BRIGHTNESS, true);
      display.clear();
      if (power_status == POWERING_ON) {
        display.setSegments(DISPLAY_MSG_BOOT);
      } else if (power_status == POWERED_ON) {
    10c6:	82 30       	cpi	r24, 0x02	; 2
    10c8:	09 f0       	breq	.+2      	; 0x10cc <main+0x5f4>
    10ca:	7a ce       	rjmp	.-780    	; 0xdc0 <main+0x2e8>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:574
        display.setSegments(DISPLAY_MSG_ON);
    10cc:	8e e8       	ldi	r24, 0x8E	; 142
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	f8 cf       	rjmp	.-16     	; 0x10c2 <main+0x5ea>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:576
      }
    } else if (command == CMD_STATUS) {
    10d2:	07 34       	cpi	r16, 0x47	; 71
    10d4:	11 05       	cpc	r17, r1
    10d6:	21 f5       	brne	.+72     	; 0x1120 <main+0x648>
send_power_status():
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:489
  }
}

// send power status to the software serial port
void send_power_status() {
  if (power_status == POWERED_OFF) {
    10d8:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <power_status>
    10dc:	81 11       	cpse	r24, r1
    10de:	04 c0       	rjmp	.+8      	; 0x10e8 <main+0x610>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:490
    swserial.println("powered off");
    10e0:	86 ef       	ldi	r24, 0xF6	; 246
    10e2:	90 e0       	ldi	r25, 0x00	; 0
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:502
  } else if (power_status == WAIT_FOR_SHUTDOWN) {
    swserial.println("wait for shutdown");
  } else if (power_status == HARD_SHUTDOWN) {
    swserial.println("hard shutdown");
  } else {
    swserial.println("unknown");
    10e4:	c8 db       	rcall	.-2160   	; 0x876 <Print::println(char const*) [clone .constprop.19]>
    10e6:	6c ce       	rjmp	.-808    	; 0xdc0 <main+0x2e8>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:491

// send power status to the software serial port
void send_power_status() {
  if (power_status == POWERED_OFF) {
    swserial.println("powered off");
  } else if (power_status == POWERING_ON) {
    10e8:	81 30       	cpi	r24, 0x01	; 1
    10ea:	19 f4       	brne	.+6      	; 0x10f2 <main+0x61a>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:492
    swserial.println("powering on");
    10ec:	82 e0       	ldi	r24, 0x02	; 2
    10ee:	91 e0       	ldi	r25, 0x01	; 1
    10f0:	f9 cf       	rjmp	.-14     	; 0x10e4 <main+0x60c>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:493
  } else if (power_status == POWERED_ON) {
    10f2:	82 30       	cpi	r24, 0x02	; 2
    10f4:	19 f4       	brne	.+6      	; 0x10fc <main+0x624>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:494
    swserial.println("powered on");
    10f6:	8e e0       	ldi	r24, 0x0E	; 14
    10f8:	91 e0       	ldi	r25, 0x01	; 1
    10fa:	f4 cf       	rjmp	.-24     	; 0x10e4 <main+0x60c>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:495
  } else if (power_status == POWERING_OFF) {
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	19 f4       	brne	.+6      	; 0x1106 <main+0x62e>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:496
    swserial.println("powering off");
    1100:	89 e1       	ldi	r24, 0x19	; 25
    1102:	91 e0       	ldi	r25, 0x01	; 1
    1104:	ef cf       	rjmp	.-34     	; 0x10e4 <main+0x60c>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:497
  } else if (power_status == WAIT_FOR_SHUTDOWN) {
    1106:	84 30       	cpi	r24, 0x04	; 4
    1108:	19 f4       	brne	.+6      	; 0x1110 <main+0x638>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:498
    swserial.println("wait for shutdown");
    110a:	86 e2       	ldi	r24, 0x26	; 38
    110c:	91 e0       	ldi	r25, 0x01	; 1
    110e:	ea cf       	rjmp	.-44     	; 0x10e4 <main+0x60c>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:499
  } else if (power_status == HARD_SHUTDOWN) {
    1110:	85 30       	cpi	r24, 0x05	; 5
    1112:	19 f4       	brne	.+6      	; 0x111a <main+0x642>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:500
    swserial.println("hard shutdown");
    1114:	88 e3       	ldi	r24, 0x38	; 56
    1116:	91 e0       	ldi	r25, 0x01	; 1
    1118:	e5 cf       	rjmp	.-54     	; 0x10e4 <main+0x60c>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:502
  } else {
    swserial.println("unknown");
    111a:	86 e4       	ldi	r24, 0x46	; 70
    111c:	91 e0       	ldi	r25, 0x01	; 1
    111e:	e2 cf       	rjmp	.-60     	; 0x10e4 <main+0x60c>
loop():
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:579
        display.setSegments(DISPLAY_MSG_ON);
      }
    } else if (command == CMD_STATUS) {
      // return power status
      send_power_status();
    } else if (command == CMD_MILLIS) {
    1120:	0d 34       	cpi	r16, 0x4D	; 77
    1122:	11 05       	cpc	r17, r1
    1124:	09 f0       	breq	.+2      	; 0x1128 <main+0x650>
    1126:	4c ce       	rjmp	.-872    	; 0xdc0 <main+0x2e8>
printNumber():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/Print.cpp:261

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    1128:	19 a2       	std	Y+33, r1	; 0x21
    112a:	8e 01       	movw	r16, r28
    112c:	0f 5d       	subi	r16, 0xDF	; 223
    112e:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/Print.cpp:268
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    1130:	c7 01       	movw	r24, r14
    1132:	b6 01       	movw	r22, r12
    1134:	a3 01       	movw	r20, r6
    1136:	92 01       	movw	r18, r4
    1138:	f8 d2       	rcall	.+1520   	; 0x172a <__udivmodsi4>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/Print.cpp:269
    char c = m - base * n;
    113a:	82 2f       	mov	r24, r18
    113c:	6a e0       	ldi	r22, 0x0A	; 10
    113e:	c5 d2       	rcall	.+1418   	; 0x16ca <__mulqi3>
    1140:	ec 2d       	mov	r30, r12
    1142:	e8 1b       	sub	r30, r24
    1144:	8e 2f       	mov	r24, r30
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/Print.cpp:270
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    1146:	ea 30       	cpi	r30, 0x0A	; 10
    1148:	c4 f4       	brge	.+48     	; 0x117a <main+0x6a2>
    114a:	80 5d       	subi	r24, 0xD0	; 208
    114c:	f8 01       	movw	r30, r16
    114e:	82 93       	st	-Z, r24
    1150:	8f 01       	movw	r16, r30
    1152:	69 01       	movw	r12, r18
    1154:	7a 01       	movw	r14, r20
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/Print.cpp:271
  } while(n);
    1156:	c1 14       	cp	r12, r1
    1158:	d1 04       	cpc	r13, r1
    115a:	e1 04       	cpc	r14, r1
    115c:	f1 04       	cpc	r15, r1
    115e:	41 f7       	brne	.-48     	; 0x1130 <main+0x658>
write():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/Print.h:81
    1160:	01 90       	ld	r0, Z+
    1162:	00 20       	and	r0, r0
    1164:	e9 f7       	brne	.-6      	; 0x1160 <main+0x688>
    1166:	31 97       	sbiw	r30, 0x01	; 1
    1168:	af 01       	movw	r20, r30
    116a:	40 1b       	sub	r20, r16
    116c:	51 0b       	sbc	r21, r17
    116e:	b8 01       	movw	r22, r16
    1170:	8b ee       	ldi	r24, 0xEB	; 235
    1172:	91 e0       	ldi	r25, 0x01	; 1
    1174:	58 d9       	rcall	.-3408   	; 0x426 <Print::write(unsigned char const*, unsigned int)>
println():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/Print.cpp:185
}

size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
    1176:	6f db       	rcall	.-2338   	; 0x856 <Print::println() [clone .constprop.21]>
    1178:	23 ce       	rjmp	.-954    	; 0xdc0 <main+0x2e8>
printNumber():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/Print.cpp:270

  do {
    unsigned long m = n;
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    117a:	89 5c       	subi	r24, 0xC9	; 201
    117c:	e7 cf       	rjmp	.-50     	; 0x114c <main+0x674>
check_power_button():
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:316
    // take a sample
    button_aval = analogRead(BUTTON_PIN);
    if (button_aval < BUTTON_REFERENCE_VALUE) {
      button_dval = BUTTON_PRESSED;
    } else {
      button_dval = BUTTON_RELEASED;
    117e:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <button_dval+0x1>
    1182:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <button_dval>
    1186:	4c ce       	rjmp	.-872    	; 0xe20 <main+0x348>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:331
    if (button_status == BUTTON_IDLE && sum_of_states >= 10 && (timestamp - button_released_millis >= SHORT_PRESS_MS || button_released_millis == 0)) {
      // button press confirmed
      button_pressed_millis = timestamp;
      button_status = BUTTON_PRESSED;
      button_states = 0;
    } else if (button_status == BUTTON_PRESSED && sum_of_states == 0) {
    1188:	91 30       	cpi	r25, 0x01	; 1
    118a:	71 f4       	brne	.+28     	; 0x11a8 <main+0x6d0>
    118c:	23 2b       	or	r18, r19
    118e:	09 f0       	breq	.+2      	; 0x1192 <main+0x6ba>
    1190:	86 ce       	rjmp	.-756    	; 0xe9e <main+0x3c6>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:333
      // button release confirmed
      button_released_millis = timestamp;
    1192:	c0 92 cc 01 	sts	0x01CC, r12	; 0x8001cc <button_released_millis>
    1196:	d0 92 cd 01 	sts	0x01CD, r13	; 0x8001cd <button_released_millis+0x1>
    119a:	e0 92 ce 01 	sts	0x01CE, r14	; 0x8001ce <button_released_millis+0x2>
    119e:	f0 92 cf 01 	sts	0x01CF, r15	; 0x8001cf <button_released_millis+0x3>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:334
      button_status = BUTTON_RELEASED;
    11a2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <button_status>
    11a6:	77 ce       	rjmp	.-786    	; 0xe96 <main+0x3be>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:336
      button_states = 0;
    } else if (button_status == BUTTON_RELEASED && timestamp - button_released_millis >= SHORT_PRESS_MS) {
    11a8:	91 11       	cpse	r25, r1
    11aa:	19 c0       	rjmp	.+50     	; 0x11de <main+0x706>
    11ac:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <button_released_millis>
    11b0:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <button_released_millis+0x1>
    11b4:	a0 91 ce 01 	lds	r26, 0x01CE	; 0x8001ce <button_released_millis+0x2>
    11b8:	b0 91 cf 01 	lds	r27, 0x01CF	; 0x8001cf <button_released_millis+0x3>
    11bc:	a7 01       	movw	r20, r14
    11be:	96 01       	movw	r18, r12
    11c0:	28 1b       	sub	r18, r24
    11c2:	39 0b       	sbc	r19, r25
    11c4:	4a 0b       	sbc	r20, r26
    11c6:	5b 0b       	sbc	r21, r27
    11c8:	da 01       	movw	r26, r20
    11ca:	c9 01       	movw	r24, r18
    11cc:	80 3d       	cpi	r24, 0xD0	; 208
    11ce:	97 40       	sbci	r25, 0x07	; 7
    11d0:	a1 05       	cpc	r26, r1
    11d2:	b1 05       	cpc	r27, r1
    11d4:	08 f4       	brcc	.+2      	; 0x11d8 <main+0x700>
    11d6:	63 ce       	rjmp	.-826    	; 0xe9e <main+0x3c6>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:338
      // button released a short press ago: wait for next press of the button
      button_status = BUTTON_IDLE;
    11d8:	80 92 61 00 	sts	0x0061, r8	; 0x800061 <button_status>
    11dc:	5c ce       	rjmp	.-840    	; 0xe96 <main+0x3be>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:340
      button_states = 0;
    } else if (button_status == BUTTON_WAIT_RELEASE && sum_of_states == 0) {
    11de:	93 30       	cpi	r25, 0x03	; 3
    11e0:	79 f4       	brne	.+30     	; 0x1200 <main+0x728>
    11e2:	23 2b       	or	r18, r19
    11e4:	09 f0       	breq	.+2      	; 0x11e8 <main+0x710>
    11e6:	5b ce       	rjmp	.-842    	; 0xe9e <main+0x3c6>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:342
      // button release confirmed while waiting to release
      button_released_millis = timestamp;
    11e8:	c0 92 cc 01 	sts	0x01CC, r12	; 0x8001cc <button_released_millis>
    11ec:	d0 92 cd 01 	sts	0x01CD, r13	; 0x8001cd <button_released_millis+0x1>
    11f0:	e0 92 ce 01 	sts	0x01CE, r14	; 0x8001ce <button_released_millis+0x2>
    11f4:	f0 92 cf 01 	sts	0x01CF, r15	; 0x8001cf <button_released_millis+0x3>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:343
      button_status = BUTTON_WAIT_RELEASED;
    11f8:	84 e0       	ldi	r24, 0x04	; 4
    11fa:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <button_status>
    11fe:	4b ce       	rjmp	.-874    	; 0xe96 <main+0x3be>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:345
      button_states = 0;
    } else if (button_status == BUTTON_WAIT_RELEASED && timestamp - button_released_millis >= SHORT_PRESS_MS) {
    1200:	94 30       	cpi	r25, 0x04	; 4
    1202:	a1 f2       	breq	.-88     	; 0x11ac <main+0x6d4>
    1204:	4c ce       	rjmp	.-872    	; 0xe9e <main+0x3c6>
loop():
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:596
  // update state based on the button status and the time the button is pressed
  if (button_status == BUTTON_PRESSED && timestamp - button_pressed_millis >= LONG_PRESS_MS) {
    // long button press detected
    power_status = HARD_SHUTDOWN;
    button_status = BUTTON_WAIT_RELEASE;
  } else if (button_status == BUTTON_RELEASED && button_released_millis - button_pressed_millis <= SHORT_PRESS_MS) {
    1206:	81 11       	cpse	r24, r1
    1208:	71 ce       	rjmp	.-798    	; 0xeec <main+0x414>
    120a:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <button_released_millis>
    120e:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <button_released_millis+0x1>
    1212:	a0 91 ce 01 	lds	r26, 0x01CE	; 0x8001ce <button_released_millis+0x2>
    1216:	b0 91 cf 01 	lds	r27, 0x01CF	; 0x8001cf <button_released_millis+0x3>
    121a:	40 91 d0 01 	lds	r20, 0x01D0	; 0x8001d0 <button_pressed_millis>
    121e:	50 91 d1 01 	lds	r21, 0x01D1	; 0x8001d1 <button_pressed_millis+0x1>
    1222:	60 91 d2 01 	lds	r22, 0x01D2	; 0x8001d2 <button_pressed_millis+0x2>
    1226:	70 91 d3 01 	lds	r23, 0x01D3	; 0x8001d3 <button_pressed_millis+0x3>
    122a:	84 1b       	sub	r24, r20
    122c:	95 0b       	sbc	r25, r21
    122e:	a6 0b       	sbc	r26, r22
    1230:	b7 0b       	sbc	r27, r23
    1232:	81 3d       	cpi	r24, 0xD1	; 209
    1234:	97 40       	sbci	r25, 0x07	; 7
    1236:	a1 05       	cpc	r26, r1
    1238:	b1 05       	cpc	r27, r1
    123a:	08 f0       	brcs	.+2      	; 0x123e <main+0x766>
    123c:	57 ce       	rjmp	.-850    	; 0xeec <main+0x414>
    123e:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <power_status>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:598
    // short button press detected
    if (power_status == POWERED_OFF) {
    1242:	81 11       	cpse	r24, r1
    1244:	05 c0       	rjmp	.+10     	; 0x1250 <main+0x778>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:599
      power_status = POWERING_ON;
    1246:	b0 92 d4 01 	sts	0x01D4, r11	; 0x8001d4 <power_status>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:603
    } else if (power_status == POWERING_ON || power_status == POWERED_ON) {
      power_status = POWERING_OFF;
    }
    button_status = BUTTON_IDLE;
    124a:	80 92 61 00 	sts	0x0061, r8	; 0x800061 <button_status>
    124e:	4e ce       	rjmp	.-868    	; 0xeec <main+0x414>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:600
    button_status = BUTTON_WAIT_RELEASE;
  } else if (button_status == BUTTON_RELEASED && button_released_millis - button_pressed_millis <= SHORT_PRESS_MS) {
    // short button press detected
    if (power_status == POWERED_OFF) {
      power_status = POWERING_ON;
    } else if (power_status == POWERING_ON || power_status == POWERED_ON) {
    1250:	81 50       	subi	r24, 0x01	; 1
    1252:	82 30       	cpi	r24, 0x02	; 2
    1254:	d0 f7       	brcc	.-12     	; 0x124a <main+0x772>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:601
      power_status = POWERING_OFF;
    1256:	90 92 d4 01 	sts	0x01D4, r9	; 0x8001d4 <power_status>
    125a:	f7 cf       	rjmp	.-18     	; 0x124a <main+0x772>
setBrightness():
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:78
    125c:	a0 92 e8 01 	sts	0x01E8, r10	; 0x8001e8 <display+0x2>
power_on():
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:230
  if (relay_status == RELAY_OFF) {
    if (display_mode == LED_MODE) {
      set_led(LED_BLINK_CONT_OFF, BLINK_DELAY_MS);
    } else {
      display.setBrightness(DISPLAY_BRIGHTNESS, true);
      display.clear();
    1260:	68 d8       	rcall	.-3888   	; 0x332 <TM1637Display::clear() [clone .constprop.12]>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:231
      display.setSegments(DISPLAY_MSG_BOOT);
    1262:	8a e8       	ldi	r24, 0x8A	; 138
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	45 d8       	rcall	.-3958   	; 0x2f2 <TM1637Display::setSegments(unsigned char const*, unsigned char, unsigned char) [clone .constprop.13]>
    1268:	55 ce       	rjmp	.-854    	; 0xf14 <main+0x43c>
    126a:	0c 96       	adiw	r24, 0x0c	; 12
begin():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:427

void SoftSerial::begin(long speed)
{
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;

  for (unsigned i=0; i<sizeof(table)/sizeof(table[0]); ++i)
    126c:	80 39       	cpi	r24, 0x90	; 144
    126e:	91 05       	cpc	r25, r1
    1270:	09 f0       	breq	.+2      	; 0x1274 <main+0x79c>
    1272:	63 ce       	rjmp	.-826    	; 0xf3a <main+0x462>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:425
// Public methods
//

void SoftSerial::begin(long speed)
{
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    1274:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <swserial+0xc>
    1278:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <swserial+0xb>
    127c:	8f ce       	rjmp	.-738    	; 0xf9c <main+0x4c4>
loop():
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:612
  if (power_status == POWERING_ON) {

    // switch relay to power on
    power_on();

  } else if (power_status == POWERED_ON) {
    127e:	82 30       	cpi	r24, 0x02	; 2
    1280:	09 f4       	brne	.+2      	; 0x1284 <main+0x7ac>
    1282:	89 cc       	rjmp	.-1774   	; 0xb96 <main+0xbe>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:616

    // powered on: running normally

  } else if (power_status == POWERING_OFF) {
    1284:	83 30       	cpi	r24, 0x03	; 3
    1286:	69 f5       	brne	.+90     	; 0x12e2 <main+0x80a>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:619

    // request pi to shutdown
    swserial.println("shutdown");
    1288:	8d e3       	ldi	r24, 0x3D	; 61
    128a:	91 e0       	ldi	r25, 0x01	; 1
    128c:	f4 da       	rcall	.-2584   	; 0x876 <Print::println(char const*) [clone .constprop.19]>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:620
    swserial.flush();
    128e:	8b ee       	ldi	r24, 0xEB	; 235
    1290:	91 e0       	ldi	r25, 0x01	; 1
    1292:	17 d9       	rcall	.-3538   	; 0x4c2 <SoftSerial::flush()>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:623

    // wait for final shutdown (or timeout)
    if (display_mode == LED_MODE) {
    1294:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <display_mode>
    1298:	81 11       	cpse	r24, r1
    129a:	1f c0       	rjmp	.+62     	; 0x12da <main+0x802>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:624
      set_led(LED_BLINK_CONT_OFF, BLINK_DELAY_MS);
    129c:	4a ef       	ldi	r20, 0xFA	; 250
    129e:	50 e0       	ldi	r21, 0x00	; 0
    12a0:	60 e0       	ldi	r22, 0x00	; 0
    12a2:	70 e0       	ldi	r23, 0x00	; 0
    12a4:	84 e0       	ldi	r24, 0x04	; 4
    12a6:	4e da       	rcall	.-2916   	; 0x744 <set_led(unsigned char, unsigned long)>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:630
    } else {
      display.setSegments(DISPLAY_MSG_SHUTDOWN);
    }

    // end serial connection to be able to detect power off
    swserial.end();
    12a8:	33 d7       	rcall	.+3686   	; 0x2110 <__TEXT_REGION_LENGTH__+0x110>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:632

    shutdown_timestamp = timestamp + WAIT_TIMEOUT_MS;
    12aa:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <timestamp>
    12ae:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <timestamp+0x1>
    12b2:	a0 91 da 01 	lds	r26, 0x01DA	; 0x8001da <timestamp+0x2>
    12b6:	b0 91 db 01 	lds	r27, 0x01DB	; 0x8001db <timestamp+0x3>
    12ba:	80 5d       	subi	r24, 0xD0	; 208
    12bc:	9a 48       	sbci	r25, 0x8A	; 138
    12be:	af 4f       	sbci	r26, 0xFF	; 255
    12c0:	bf 4f       	sbci	r27, 0xFF	; 255
    12c2:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <shutdown_timestamp>
    12c6:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <shutdown_timestamp+0x1>
    12ca:	a0 93 ca 01 	sts	0x01CA, r26	; 0x8001ca <shutdown_timestamp+0x2>
    12ce:	b0 93 cb 01 	sts	0x01CB, r27	; 0x8001cb <shutdown_timestamp+0x3>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:633
    power_status = WAIT_FOR_SHUTDOWN;
    12d2:	84 e0       	ldi	r24, 0x04	; 4
    12d4:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <power_status>
    12d8:	5e cc       	rjmp	.-1860   	; 0xb96 <main+0xbe>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:626

    // wait for final shutdown (or timeout)
    if (display_mode == LED_MODE) {
      set_led(LED_BLINK_CONT_OFF, BLINK_DELAY_MS);
    } else {
      display.setSegments(DISPLAY_MSG_SHUTDOWN);
    12da:	86 e8       	ldi	r24, 0x86	; 134
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	09 d8       	rcall	.-4078   	; 0x2f2 <TM1637Display::setSegments(unsigned char const*, unsigned char, unsigned char) [clone .constprop.13]>
    12e0:	e3 cf       	rjmp	.-58     	; 0x12a8 <main+0x7d0>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:635
    swserial.end();

    shutdown_timestamp = timestamp + WAIT_TIMEOUT_MS;
    power_status = WAIT_FOR_SHUTDOWN;

  } else if (power_status == WAIT_FOR_SHUTDOWN) {
    12e2:	84 30       	cpi	r24, 0x04	; 4
    12e4:	49 f5       	brne	.+82     	; 0x1338 <main+0x860>
check_shutdown():
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:360

// check if the pi has been shutdown completely
// pre: stop software serial
bool check_shutdown() {
  // use P03/ADC03 to check voltage on pin GPIO14 / TX on the PI
  poweroff_aval = analogRead(SERIAL_RX_PIN);
    12e6:	83 e0       	ldi	r24, 0x03	; 3
    12e8:	38 d8       	rcall	.-3984   	; 0x35a <analogRead>
    12ea:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <poweroff_aval+0x1>
    12ee:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <poweroff_aval>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:361
  return ((poweroff_aval / 1024.0) < 0.1);
    12f2:	bc 01       	movw	r22, r24
    12f4:	99 0f       	add	r25, r25
    12f6:	88 0b       	sbc	r24, r24
    12f8:	99 0b       	sbc	r25, r25
    12fa:	cc d0       	rcall	.+408    	; 0x1494 <__floatsisf>
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	40 e8       	ldi	r20, 0x80	; 128
    1302:	5a e3       	ldi	r21, 0x3A	; 58
    1304:	26 d1       	rcall	.+588    	; 0x1552 <__mulsf3>
loop():
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:638
    power_status = WAIT_FOR_SHUTDOWN;

  } else if (power_status == WAIT_FOR_SHUTDOWN) {

    // check if the pi has been shutdown completely
    if (check_shutdown()) {
    1306:	2d ec       	ldi	r18, 0xCD	; 205
    1308:	3c ec       	ldi	r19, 0xCC	; 204
    130a:	4c ec       	ldi	r20, 0xCC	; 204
    130c:	5d e3       	ldi	r21, 0x3D	; 61
    130e:	bc d0       	rcall	.+376    	; 0x1488 <__cmpsf2>
    1310:	87 ff       	sbrs	r24, 7
    1312:	03 c0       	rjmp	.+6      	; 0x131a <main+0x842>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:640
      // shutdown completed: turn off and wait for power on
      power_off(true);
    1314:	81 e0       	ldi	r24, 0x01	; 1
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:649
    }

  } else if (power_status == HARD_SHUTDOWN) {

    // hard shutdown
    power_off(false);
    1316:	c4 da       	rcall	.-2680   	; 0x8a0 <power_off(bool)>
    1318:	3e cc       	rjmp	.-1924   	; 0xb96 <main+0xbe>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:641

    // check if the pi has been shutdown completely
    if (check_shutdown()) {
      // shutdown completed: turn off and wait for power on
      power_off(true);
    } else if (timestamp >= shutdown_timestamp) {
    131a:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <shutdown_timestamp>
    131e:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <shutdown_timestamp+0x1>
    1322:	a0 91 ca 01 	lds	r26, 0x01CA	; 0x8001ca <shutdown_timestamp+0x2>
    1326:	b0 91 cb 01 	lds	r27, 0x01CB	; 0x8001cb <shutdown_timestamp+0x3>
    132a:	c8 16       	cp	r12, r24
    132c:	d9 06       	cpc	r13, r25
    132e:	ea 06       	cpc	r14, r26
    1330:	fb 06       	cpc	r15, r27
    1332:	08 f4       	brcc	.+2      	; 0x1336 <main+0x85e>
    1334:	30 cc       	rjmp	.-1952   	; 0xb96 <main+0xbe>
    1336:	ee cf       	rjmp	.-36     	; 0x1314 <main+0x83c>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:646
      // time out waiting for poweroff changed event: power off anyway
      power_off(true);
    }

  } else if (power_status == HARD_SHUTDOWN) {
    1338:	85 30       	cpi	r24, 0x05	; 5
    133a:	09 f0       	breq	.+2      	; 0x133e <main+0x866>
    133c:	2c cc       	rjmp	.-1960   	; 0xb96 <main+0xbe>
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:649

    // hard shutdown
    power_off(false);
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	ea cf       	rjmp	.-44     	; 0x1316 <main+0x83e>

00001342 <_GLOBAL__sub_I_relay_status>:
__base_ctor ():
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:64
static const uint8_t minusSegments = 0b01000000;

TM1637Display::TM1637Display(uint8_t pinClk, uint8_t pinDIO, unsigned int bitDelay)
{
	// Copy the pin numbers
	m_pinClk = pinClk;
    1342:	82 e0       	ldi	r24, 0x02	; 2
    1344:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <display>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:65
	m_pinDIO = pinDIO;
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <display+0x1>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:66
	m_bitDelay = bitDelay;
    134e:	84 e6       	ldi	r24, 0x64	; 100
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <display+0x4>
    1356:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <display+0x3>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:70

	// Set the pin direction and default value.
	// Both pins are set as inputs, allowing the pull-up resistors to pull them up
    pinMode(m_pinClk, INPUT);
    135a:	60 e0       	ldi	r22, 0x00	; 0
    135c:	82 e0       	ldi	r24, 0x02	; 2
    135e:	25 d7       	rcall	.+3658   	; 0x21aa <__TEXT_REGION_LENGTH__+0x1aa>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:71
    pinMode(m_pinDIO,INPUT);
    1360:	60 e0       	ldi	r22, 0x00	; 0
    1362:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <display+0x1>
    1366:	21 d7       	rcall	.+3650   	; 0x21aa <__TEXT_REGION_LENGTH__+0x1aa>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:72
	digitalWrite(m_pinClk, LOW);
    1368:	60 e0       	ldi	r22, 0x00	; 0
    136a:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <display>
    136e:	ed d6       	rcall	.+3546   	; 0x214a <__TEXT_REGION_LENGTH__+0x14a>
c:\Users\Eelco\Documents\Arduino\libraries\TM1637/TM1637Display.cpp:73
	digitalWrite(m_pinDIO, LOW);
    1370:	60 e0       	ldi	r22, 0x00	; 0
    1372:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <display+0x1>
    1376:	e9 d6       	rcall	.+3538   	; 0x214a <__TEXT_REGION_LENGTH__+0x14a>
_ZN5PrintC2Ev():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\cores\tiny/Print.h:75
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1378:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <swserial+0x3>
    137c:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <swserial+0x2>
__base_ctor ():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:380
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
    1380:	8a e7       	ldi	r24, 0x7A	; 122
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <swserial+0x1>
    1388:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <swserial>
    138c:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <swserial+0xc>
    1390:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <swserial+0xb>
    1394:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <swserial+0xe>
    1398:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <swserial+0xd>
    139c:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <swserial+0x10>
    13a0:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <swserial+0xf>
    13a4:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <swserial+0x12>
    13a8:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <swserial+0x11>
    13ac:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <swserial+0x13>
    13b0:	8e 7f       	andi	r24, 0xFE	; 254
    13b2:	8d 7f       	andi	r24, 0xFD	; 253
    13b4:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <swserial+0x13>
setRX():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:410
  _transmitPortRegister = portOutputRegister(port);
}

void SoftSerial::setRX(uint8_t rx)
{
  pinMode(rx, INPUT);
    13b8:	60 e0       	ldi	r22, 0x00	; 0
    13ba:	83 e0       	ldi	r24, 0x03	; 3
    13bc:	f6 d6       	rcall	.+3564   	; 0x21aa <__TEXT_REGION_LENGTH__+0x1aa>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:411
  if (!_inverse_logic)
    13be:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <swserial+0x13>
    13c2:	81 fd       	sbrc	r24, 1
    13c4:	03 c0       	rjmp	.+6      	; 0x13cc <_GLOBAL__sub_I_relay_status+0x8a>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:412
    digitalWrite(rx, HIGH);  // pullup for normal logic!
    13c6:	61 e0       	ldi	r22, 0x01	; 1
    13c8:	83 e0       	ldi	r24, 0x03	; 3
    13ca:	bf d6       	rcall	.+3454   	; 0x214a <__TEXT_REGION_LENGTH__+0x14a>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:413
  _receivePin = rx;
    13cc:	83 e0       	ldi	r24, 0x03	; 3
    13ce:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <swserial+0x4>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:414
  _receiveBitMask = digitalPinToBitMask(rx);
    13d2:	ed eb       	ldi	r30, 0xBD	; 189
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	24 91       	lpm	r18, Z
    13d8:	20 93 f0 01 	sts	0x01F0, r18	; 0x8001f0 <swserial+0x5>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:415
  uint8_t port = digitalPinToPort(rx);
    13dc:	e7 eb       	ldi	r30, 0xB7	; 183
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	e4 91       	lpm	r30, Z
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:416
  _receivePortRegister = portInputRegister(port);
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	ee 54       	subi	r30, 0x4E	; 78
    13e6:	ff 4f       	sbci	r31, 0xFF	; 255
    13e8:	84 91       	lpm	r24, Z
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <swserial+0x7>
    13f0:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <swserial+0x6>
setTX():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:397
  end();
}

void SoftSerial::setTX(uint8_t tx)
{
  _transmitBitMask = digitalPinToBitMask(tx);
    13f4:	ee eb       	ldi	r30, 0xBE	; 190
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	e4 91       	lpm	r30, Z
    13fa:	e0 93 f3 01 	sts	0x01F3, r30	; 0x8001f3 <swserial+0x8>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:398
  if(_transmitBitMask!=_receiveBitMask)
    13fe:	e2 17       	cp	r30, r18
    1400:	31 f0       	breq	.+12     	; 0x140e <_GLOBAL__sub_I_relay_status+0xcc>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:400
  {
    pinMode(tx, OUTPUT);
    1402:	61 e0       	ldi	r22, 0x01	; 1
    1404:	84 e0       	ldi	r24, 0x04	; 4
    1406:	d1 d6       	rcall	.+3490   	; 0x21aa <__TEXT_REGION_LENGTH__+0x1aa>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:401
    digitalWrite(tx, HIGH);
    1408:	61 e0       	ldi	r22, 0x01	; 1
    140a:	84 e0       	ldi	r24, 0x04	; 4
    140c:	9e d6       	rcall	.+3388   	; 0x214a <__TEXT_REGION_LENGTH__+0x14a>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:404
  }
//  _transmitBitMask = digitalPinToBitMask(tx);
  uint8_t port = digitalPinToPort(tx);
    140e:	e8 eb       	ldi	r30, 0xB8	; 184
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	e4 91       	lpm	r30, Z
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:405
  _transmitPortRegister = portOutputRegister(port);
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	e0 55       	subi	r30, 0x50	; 80
    1418:	ff 4f       	sbci	r31, 0xFF	; 255
    141a:	e4 91       	lpm	r30, Z
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	f0 93 f5 01 	sts	0x01F5, r31	; 0x8001f5 <swserial+0xa>
    1422:	e0 93 f4 01 	sts	0x01F4, r30	; 0x8001f4 <swserial+0x9>
TinyPinChange_RegisterIsr():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkTinyPinChange/TinyPinChange.cpp:111

	PortIdx = DigitalPinToPortIdx(Pin);

	for(IsrIdx = 0; IsrIdx < PIN_CHANGE_HANDLER_MAX_NB; IsrIdx++)
	{
		if(PinChange.Port[PortIdx].Isr[IsrIdx] == Isr)
    1426:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <PinChange>
    142a:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <PinChange+0x1>
    142e:	8e 5a       	subi	r24, 0xAE	; 174
    1430:	92 40       	sbci	r25, 0x02	; 2
    1432:	11 f1       	breq	.+68     	; 0x1478 <_GLOBAL__sub_I_relay_status+0x136>
    1434:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <PinChange+0x2>
    1438:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <PinChange+0x3>
    143c:	8e 5a       	subi	r24, 0xAE	; 174
    143e:	92 40       	sbci	r25, 0x02	; 2
    1440:	d9 f0       	breq	.+54     	; 0x1478 <_GLOBAL__sub_I_relay_status+0x136>
    1442:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <PinChange+0x4>
    1446:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <PinChange+0x5>
    144a:	8e 5a       	subi	r24, 0xAE	; 174
    144c:	92 40       	sbci	r25, 0x02	; 2
    144e:	a1 f0       	breq	.+40     	; 0x1478 <_GLOBAL__sub_I_relay_status+0x136>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkTinyPinChange/TinyPinChange.cpp:120
		}
	}
	
	if(!AlreadyLoaded)
	{
		if(PinChange.Port[PortIdx].LoadedIsrNb < PIN_CHANGE_HANDLER_MAX_NB)
    1450:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <PinChange+0x6>
    1454:	83 30       	cpi	r24, 0x03	; 3
    1456:	80 f4       	brcc	.+32     	; 0x1478 <_GLOBAL__sub_I_relay_status+0x136>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkTinyPinChange/TinyPinChange.cpp:123
		{
			/* Not aready loaded: load it */
			PinChange.Port[PortIdx].Isr[PinChange.Port[PortIdx].LoadedIsrNb] = Isr;
    1458:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <PinChange+0x6>
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	ee 0f       	add	r30, r30
    1460:	ff 1f       	adc	r31, r31
    1462:	e8 56       	subi	r30, 0x68	; 104
    1464:	fe 4f       	sbci	r31, 0xFE	; 254
    1466:	8e ea       	ldi	r24, 0xAE	; 174
    1468:	92 e0       	ldi	r25, 0x02	; 2
    146a:	91 83       	std	Z+1, r25	; 0x01
    146c:	80 83       	st	Z, r24
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkTinyPinChange/TinyPinChange.cpp:124
			PinChange.Port[PortIdx].LoadedIsrNb++;
    146e:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <PinChange+0x6>
    1472:	8f 5f       	subi	r24, 0xFF	; 255
    1474:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <PinChange+0x6>
_GLOBAL__sub_I_relay_status():
C:\Apps\Arduino\attiny_pi_power_switch\pi_attiny85_switch/pi_attiny85_switch.ino:653
  }

  // proceed to next iteration
}
    1478:	08 95       	ret

0000147a <_GLOBAL__sub_D_relay_status>:
__base_dtor ():
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:390
}

//
// Destructor
//
SoftSerial::~SoftSerial()
    147a:	8a e7       	ldi	r24, 0x7A	; 122
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <swserial+0x1>
    1482:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <swserial>
C:\Users\Eelco\AppData\Local\Arduino15\packages\digistump\hardware\avr\1.7.5\libraries\DigisparkSoftSerial/SoftSerial.cpp:392
{
  end();
    1486:	44 c6       	rjmp	.+3208   	; 0x2110 <__TEXT_REGION_LENGTH__+0x110>

00001488 <__cmpsf2>:
__cmpsf2():
    1488:	40 d0       	rcall	.+128    	; 0x150a <__fp_cmp>
    148a:	08 f4       	brcc	.+2      	; 0x148e <__cmpsf2+0x6>
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	08 95       	ret

00001490 <__floatunsisf>:
__floatunsisf():
    1490:	e8 94       	clt
    1492:	09 c0       	rjmp	.+18     	; 0x14a6 <__floatsisf+0x12>

00001494 <__floatsisf>:
    1494:	97 fb       	bst	r25, 7
    1496:	3e f4       	brtc	.+14     	; 0x14a6 <__floatsisf+0x12>
    1498:	90 95       	com	r25
    149a:	80 95       	com	r24
    149c:	70 95       	com	r23
    149e:	61 95       	neg	r22
    14a0:	7f 4f       	sbci	r23, 0xFF	; 255
    14a2:	8f 4f       	sbci	r24, 0xFF	; 255
    14a4:	9f 4f       	sbci	r25, 0xFF	; 255
    14a6:	99 23       	and	r25, r25
    14a8:	a9 f0       	breq	.+42     	; 0x14d4 <__floatsisf+0x40>
    14aa:	f9 2f       	mov	r31, r25
    14ac:	96 e9       	ldi	r25, 0x96	; 150
    14ae:	bb 27       	eor	r27, r27
    14b0:	93 95       	inc	r25
    14b2:	f6 95       	lsr	r31
    14b4:	87 95       	ror	r24
    14b6:	77 95       	ror	r23
    14b8:	67 95       	ror	r22
    14ba:	b7 95       	ror	r27
    14bc:	f1 11       	cpse	r31, r1
    14be:	f8 cf       	rjmp	.-16     	; 0x14b0 <__floatsisf+0x1c>
    14c0:	fa f4       	brpl	.+62     	; 0x1500 <__floatsisf+0x6c>
    14c2:	bb 0f       	add	r27, r27
    14c4:	11 f4       	brne	.+4      	; 0x14ca <__floatsisf+0x36>
    14c6:	60 ff       	sbrs	r22, 0
    14c8:	1b c0       	rjmp	.+54     	; 0x1500 <__floatsisf+0x6c>
    14ca:	6f 5f       	subi	r22, 0xFF	; 255
    14cc:	7f 4f       	sbci	r23, 0xFF	; 255
    14ce:	8f 4f       	sbci	r24, 0xFF	; 255
    14d0:	9f 4f       	sbci	r25, 0xFF	; 255
    14d2:	16 c0       	rjmp	.+44     	; 0x1500 <__floatsisf+0x6c>
    14d4:	88 23       	and	r24, r24
    14d6:	11 f0       	breq	.+4      	; 0x14dc <__floatsisf+0x48>
    14d8:	96 e9       	ldi	r25, 0x96	; 150
    14da:	11 c0       	rjmp	.+34     	; 0x14fe <__floatsisf+0x6a>
    14dc:	77 23       	and	r23, r23
    14de:	21 f0       	breq	.+8      	; 0x14e8 <__floatsisf+0x54>
    14e0:	9e e8       	ldi	r25, 0x8E	; 142
    14e2:	87 2f       	mov	r24, r23
    14e4:	76 2f       	mov	r23, r22
    14e6:	05 c0       	rjmp	.+10     	; 0x14f2 <__floatsisf+0x5e>
    14e8:	66 23       	and	r22, r22
    14ea:	71 f0       	breq	.+28     	; 0x1508 <__floatsisf+0x74>
    14ec:	96 e8       	ldi	r25, 0x86	; 134
    14ee:	86 2f       	mov	r24, r22
    14f0:	70 e0       	ldi	r23, 0x00	; 0
    14f2:	60 e0       	ldi	r22, 0x00	; 0
    14f4:	2a f0       	brmi	.+10     	; 0x1500 <__floatsisf+0x6c>
    14f6:	9a 95       	dec	r25
    14f8:	66 0f       	add	r22, r22
    14fa:	77 1f       	adc	r23, r23
    14fc:	88 1f       	adc	r24, r24
    14fe:	da f7       	brpl	.-10     	; 0x14f6 <__floatsisf+0x62>
    1500:	88 0f       	add	r24, r24
    1502:	96 95       	lsr	r25
    1504:	87 95       	ror	r24
    1506:	97 f9       	bld	r25, 7
    1508:	08 95       	ret

0000150a <__fp_cmp>:
__fp_cmp():
    150a:	99 0f       	add	r25, r25
    150c:	00 08       	sbc	r0, r0
    150e:	55 0f       	add	r21, r21
    1510:	aa 0b       	sbc	r26, r26
    1512:	e0 e8       	ldi	r30, 0x80	; 128
    1514:	fe ef       	ldi	r31, 0xFE	; 254
    1516:	16 16       	cp	r1, r22
    1518:	17 06       	cpc	r1, r23
    151a:	e8 07       	cpc	r30, r24
    151c:	f9 07       	cpc	r31, r25
    151e:	c0 f0       	brcs	.+48     	; 0x1550 <__fp_cmp+0x46>
    1520:	12 16       	cp	r1, r18
    1522:	13 06       	cpc	r1, r19
    1524:	e4 07       	cpc	r30, r20
    1526:	f5 07       	cpc	r31, r21
    1528:	98 f0       	brcs	.+38     	; 0x1550 <__fp_cmp+0x46>
    152a:	62 1b       	sub	r22, r18
    152c:	73 0b       	sbc	r23, r19
    152e:	84 0b       	sbc	r24, r20
    1530:	95 0b       	sbc	r25, r21
    1532:	39 f4       	brne	.+14     	; 0x1542 <__fp_cmp+0x38>
    1534:	0a 26       	eor	r0, r26
    1536:	61 f0       	breq	.+24     	; 0x1550 <__fp_cmp+0x46>
    1538:	23 2b       	or	r18, r19
    153a:	24 2b       	or	r18, r20
    153c:	25 2b       	or	r18, r21
    153e:	21 f4       	brne	.+8      	; 0x1548 <__fp_cmp+0x3e>
    1540:	08 95       	ret
    1542:	0a 26       	eor	r0, r26
    1544:	09 f4       	brne	.+2      	; 0x1548 <__fp_cmp+0x3e>
    1546:	a1 40       	sbci	r26, 0x01	; 1
    1548:	a6 95       	lsr	r26
    154a:	8f ef       	ldi	r24, 0xFF	; 255
    154c:	81 1d       	adc	r24, r1
    154e:	81 1d       	adc	r24, r1
    1550:	08 95       	ret

00001552 <__mulsf3>:
__mulsf3():
    1552:	0a d0       	rcall	.+20     	; 0x1568 <__mulsf3x>
    1554:	80 c0       	rjmp	.+256    	; 0x1656 <__fp_round>
    1556:	71 d0       	rcall	.+226    	; 0x163a <__fp_pscA>
    1558:	28 f0       	brcs	.+10     	; 0x1564 <__mulsf3+0x12>
    155a:	76 d0       	rcall	.+236    	; 0x1648 <__fp_pscB>
    155c:	18 f0       	brcs	.+6      	; 0x1564 <__mulsf3+0x12>
    155e:	95 23       	and	r25, r21
    1560:	09 f0       	breq	.+2      	; 0x1564 <__mulsf3+0x12>
    1562:	62 c0       	rjmp	.+196    	; 0x1628 <__fp_inf>
    1564:	67 c0       	rjmp	.+206    	; 0x1634 <__fp_nan>
    1566:	ab c0       	rjmp	.+342    	; 0x16be <__fp_szero>

00001568 <__mulsf3x>:
__mulsf3x():
    1568:	87 d0       	rcall	.+270    	; 0x1678 <__fp_split3>
    156a:	a8 f3       	brcs	.-22     	; 0x1556 <__mulsf3+0x4>

0000156c <__mulsf3_pse>:
    156c:	99 23       	and	r25, r25
    156e:	d9 f3       	breq	.-10     	; 0x1566 <__mulsf3+0x14>
    1570:	55 23       	and	r21, r21
    1572:	c9 f3       	breq	.-14     	; 0x1566 <__mulsf3+0x14>
    1574:	95 0f       	add	r25, r21
    1576:	50 e0       	ldi	r21, 0x00	; 0
    1578:	55 1f       	adc	r21, r21
    157a:	aa 27       	eor	r26, r26
    157c:	ee 27       	eor	r30, r30
    157e:	ff 27       	eor	r31, r31
    1580:	bb 27       	eor	r27, r27
    1582:	00 24       	eor	r0, r0
    1584:	08 94       	sec
    1586:	67 95       	ror	r22
    1588:	20 f4       	brcc	.+8      	; 0x1592 <__mulsf3_pse+0x26>
    158a:	e2 0f       	add	r30, r18
    158c:	f3 1f       	adc	r31, r19
    158e:	b4 1f       	adc	r27, r20
    1590:	0a 1e       	adc	r0, r26
    1592:	22 0f       	add	r18, r18
    1594:	33 1f       	adc	r19, r19
    1596:	44 1f       	adc	r20, r20
    1598:	aa 1f       	adc	r26, r26
    159a:	66 95       	lsr	r22
    159c:	a9 f7       	brne	.-22     	; 0x1588 <__mulsf3_pse+0x1c>
    159e:	77 95       	ror	r23
    15a0:	30 f4       	brcc	.+12     	; 0x15ae <__mulsf3_pse+0x42>
    15a2:	f3 0f       	add	r31, r19
    15a4:	b4 1f       	adc	r27, r20
    15a6:	0a 1e       	adc	r0, r26
    15a8:	12 1e       	adc	r1, r18
    15aa:	08 f4       	brcc	.+2      	; 0x15ae <__mulsf3_pse+0x42>
    15ac:	63 95       	inc	r22
    15ae:	33 0f       	add	r19, r19
    15b0:	44 1f       	adc	r20, r20
    15b2:	aa 1f       	adc	r26, r26
    15b4:	22 1f       	adc	r18, r18
    15b6:	76 95       	lsr	r23
    15b8:	99 f7       	brne	.-26     	; 0x15a0 <__mulsf3_pse+0x34>
    15ba:	87 95       	ror	r24
    15bc:	20 f4       	brcc	.+8      	; 0x15c6 <__mulsf3_pse+0x5a>
    15be:	b4 0f       	add	r27, r20
    15c0:	0a 1e       	adc	r0, r26
    15c2:	12 1e       	adc	r1, r18
    15c4:	63 1f       	adc	r22, r19
    15c6:	44 0f       	add	r20, r20
    15c8:	aa 1f       	adc	r26, r26
    15ca:	22 1f       	adc	r18, r18
    15cc:	33 1f       	adc	r19, r19
    15ce:	86 95       	lsr	r24
    15d0:	a9 f7       	brne	.-22     	; 0x15bc <__mulsf3_pse+0x50>
    15d2:	86 2f       	mov	r24, r22
    15d4:	71 2d       	mov	r23, r1
    15d6:	60 2d       	mov	r22, r0
    15d8:	11 24       	eor	r1, r1
    15da:	9f 57       	subi	r25, 0x7F	; 127
    15dc:	50 40       	sbci	r21, 0x00	; 0
    15de:	8a f0       	brmi	.+34     	; 0x1602 <__mulsf3_pse+0x96>
    15e0:	e1 f0       	breq	.+56     	; 0x161a <__mulsf3_pse+0xae>
    15e2:	88 23       	and	r24, r24
    15e4:	4a f0       	brmi	.+18     	; 0x15f8 <__mulsf3_pse+0x8c>
    15e6:	ee 0f       	add	r30, r30
    15e8:	ff 1f       	adc	r31, r31
    15ea:	bb 1f       	adc	r27, r27
    15ec:	66 1f       	adc	r22, r22
    15ee:	77 1f       	adc	r23, r23
    15f0:	88 1f       	adc	r24, r24
    15f2:	91 50       	subi	r25, 0x01	; 1
    15f4:	50 40       	sbci	r21, 0x00	; 0
    15f6:	a9 f7       	brne	.-22     	; 0x15e2 <__mulsf3_pse+0x76>
    15f8:	9e 3f       	cpi	r25, 0xFE	; 254
    15fa:	51 05       	cpc	r21, r1
    15fc:	70 f0       	brcs	.+28     	; 0x161a <__mulsf3_pse+0xae>
    15fe:	14 c0       	rjmp	.+40     	; 0x1628 <__fp_inf>
    1600:	5e c0       	rjmp	.+188    	; 0x16be <__fp_szero>
    1602:	5f 3f       	cpi	r21, 0xFF	; 255
    1604:	ec f3       	brlt	.-6      	; 0x1600 <__mulsf3_pse+0x94>
    1606:	98 3e       	cpi	r25, 0xE8	; 232
    1608:	dc f3       	brlt	.-10     	; 0x1600 <__mulsf3_pse+0x94>
    160a:	86 95       	lsr	r24
    160c:	77 95       	ror	r23
    160e:	67 95       	ror	r22
    1610:	b7 95       	ror	r27
    1612:	f7 95       	ror	r31
    1614:	e7 95       	ror	r30
    1616:	9f 5f       	subi	r25, 0xFF	; 255
    1618:	c1 f7       	brne	.-16     	; 0x160a <__mulsf3_pse+0x9e>
    161a:	fe 2b       	or	r31, r30
    161c:	88 0f       	add	r24, r24
    161e:	91 1d       	adc	r25, r1
    1620:	96 95       	lsr	r25
    1622:	87 95       	ror	r24
    1624:	97 f9       	bld	r25, 7
    1626:	08 95       	ret

00001628 <__fp_inf>:
    1628:	97 f9       	bld	r25, 7
    162a:	9f 67       	ori	r25, 0x7F	; 127
    162c:	80 e8       	ldi	r24, 0x80	; 128
    162e:	70 e0       	ldi	r23, 0x00	; 0
    1630:	60 e0       	ldi	r22, 0x00	; 0
    1632:	08 95       	ret

00001634 <__fp_nan>:
    1634:	9f ef       	ldi	r25, 0xFF	; 255
    1636:	80 ec       	ldi	r24, 0xC0	; 192
    1638:	08 95       	ret

0000163a <__fp_pscA>:
__fp_pscA():
    163a:	00 24       	eor	r0, r0
    163c:	0a 94       	dec	r0
    163e:	16 16       	cp	r1, r22
    1640:	17 06       	cpc	r1, r23
    1642:	18 06       	cpc	r1, r24
    1644:	09 06       	cpc	r0, r25
    1646:	08 95       	ret

00001648 <__fp_pscB>:
__fp_pscB():
    1648:	00 24       	eor	r0, r0
    164a:	0a 94       	dec	r0
    164c:	12 16       	cp	r1, r18
    164e:	13 06       	cpc	r1, r19
    1650:	14 06       	cpc	r1, r20
    1652:	05 06       	cpc	r0, r21
    1654:	08 95       	ret

00001656 <__fp_round>:
__fp_round():
    1656:	09 2e       	mov	r0, r25
    1658:	03 94       	inc	r0
    165a:	00 0c       	add	r0, r0
    165c:	11 f4       	brne	.+4      	; 0x1662 <__fp_round+0xc>
    165e:	88 23       	and	r24, r24
    1660:	52 f0       	brmi	.+20     	; 0x1676 <__fp_round+0x20>
    1662:	bb 0f       	add	r27, r27
    1664:	40 f4       	brcc	.+16     	; 0x1676 <__fp_round+0x20>
    1666:	bf 2b       	or	r27, r31
    1668:	11 f4       	brne	.+4      	; 0x166e <__fp_round+0x18>
    166a:	60 ff       	sbrs	r22, 0
    166c:	04 c0       	rjmp	.+8      	; 0x1676 <__fp_round+0x20>
    166e:	6f 5f       	subi	r22, 0xFF	; 255
    1670:	7f 4f       	sbci	r23, 0xFF	; 255
    1672:	8f 4f       	sbci	r24, 0xFF	; 255
    1674:	9f 4f       	sbci	r25, 0xFF	; 255
    1676:	08 95       	ret

00001678 <__fp_split3>:
__fp_split3():
    1678:	57 fd       	sbrc	r21, 7
    167a:	90 58       	subi	r25, 0x80	; 128
    167c:	44 0f       	add	r20, r20
    167e:	55 1f       	adc	r21, r21
    1680:	59 f0       	breq	.+22     	; 0x1698 <__fp_splitA+0x10>
    1682:	5f 3f       	cpi	r21, 0xFF	; 255
    1684:	71 f0       	breq	.+28     	; 0x16a2 <__fp_splitA+0x1a>
    1686:	47 95       	ror	r20

00001688 <__fp_splitA>:
    1688:	88 0f       	add	r24, r24
    168a:	97 fb       	bst	r25, 7
    168c:	99 1f       	adc	r25, r25
    168e:	61 f0       	breq	.+24     	; 0x16a8 <__fp_splitA+0x20>
    1690:	9f 3f       	cpi	r25, 0xFF	; 255
    1692:	79 f0       	breq	.+30     	; 0x16b2 <__fp_splitA+0x2a>
    1694:	87 95       	ror	r24
    1696:	08 95       	ret
    1698:	12 16       	cp	r1, r18
    169a:	13 06       	cpc	r1, r19
    169c:	14 06       	cpc	r1, r20
    169e:	55 1f       	adc	r21, r21
    16a0:	f2 cf       	rjmp	.-28     	; 0x1686 <__fp_split3+0xe>
    16a2:	46 95       	lsr	r20
    16a4:	f1 df       	rcall	.-30     	; 0x1688 <__fp_splitA>
    16a6:	08 c0       	rjmp	.+16     	; 0x16b8 <__fp_splitA+0x30>
    16a8:	16 16       	cp	r1, r22
    16aa:	17 06       	cpc	r1, r23
    16ac:	18 06       	cpc	r1, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	f1 cf       	rjmp	.-30     	; 0x1694 <__fp_splitA+0xc>
    16b2:	86 95       	lsr	r24
    16b4:	71 05       	cpc	r23, r1
    16b6:	61 05       	cpc	r22, r1
    16b8:	08 94       	sec
    16ba:	08 95       	ret

000016bc <__fp_zero>:
__fp_zero():
    16bc:	e8 94       	clt

000016be <__fp_szero>:
    16be:	bb 27       	eor	r27, r27
    16c0:	66 27       	eor	r22, r22
    16c2:	77 27       	eor	r23, r23
    16c4:	cb 01       	movw	r24, r22
    16c6:	97 f9       	bld	r25, 7
    16c8:	08 95       	ret

000016ca <__mulqi3>:
__mulqi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:224
    16ca:	00 24       	eor	r0, r0

000016cc <__mulqi3_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:226
    16cc:	80 fd       	sbrc	r24, 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:227
    16ce:	06 0e       	add	r0, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:228
    16d0:	66 0f       	add	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:229
    16d2:	11 f0       	breq	.+4      	; 0x16d8 <__mulqi3_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:230
    16d4:	86 95       	lsr	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:231
    16d6:	d1 f7       	brne	.-12     	; 0x16cc <__mulqi3_loop>

000016d8 <__mulqi3_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:233
    16d8:	80 2d       	mov	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:234
    16da:	08 95       	ret

000016dc <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    16dc:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    16de:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    16e0:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    16e2:	07 c0       	rjmp	.+14     	; 0x16f2 <__udivmodhi4_ep>

000016e4 <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    16e4:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    16e6:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    16e8:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    16ea:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    16ec:	10 f0       	brcs	.+4      	; 0x16f2 <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    16ee:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    16f0:	b7 0b       	sbc	r27, r23

000016f2 <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    16f2:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    16f4:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    16f6:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    16f8:	a9 f7       	brne	.-22     	; 0x16e4 <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    16fa:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    16fc:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    16fe:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    1700:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    1702:	08 95       	ret

00001704 <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    1704:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    1706:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    1708:	16 f4       	brtc	.+4      	; 0x170e <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    170a:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    170c:	06 d0       	rcall	.+12     	; 0x171a <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    170e:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    1710:	08 d0       	rcall	.+16     	; 0x1722 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    1712:	e4 df       	rcall	.-56     	; 0x16dc <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    1714:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    1716:	05 d0       	rcall	.+10     	; 0x1722 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    1718:	3e f4       	brtc	.+14     	; 0x1728 <__divmodhi4_exit>

0000171a <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    171a:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    171c:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    171e:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    1720:	08 95       	ret

00001722 <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    1722:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    1724:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    1726:	7f 4f       	sbci	r23, 0xFF	; 255

00001728 <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    1728:	08 95       	ret

0000172a <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    172a:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    172c:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    172e:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    1730:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    1732:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    1734:	0d c0       	rjmp	.+26     	; 0x1750 <__udivmodsi4_ep>

00001736 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    1736:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1738:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    173a:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    173c:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    173e:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    1740:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    1742:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    1744:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    1746:	20 f0       	brcs	.+8      	; 0x1750 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1748:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    174a:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    174c:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    174e:	f5 0b       	sbc	r31, r21

00001750 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    1750:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    1752:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    1754:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    1756:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1758:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    175a:	69 f7       	brne	.-38     	; 0x1736 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    175c:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    175e:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    1760:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    1762:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    1764:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    1766:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    1768:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    176a:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    176c:	08 95       	ret

0000176e <__popcounthi2>:
__popcounthi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3007
    176e:	07 d0       	rcall	.+14     	; 0x177e <__popcountqi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3008
    1770:	8f 93       	push	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3009
    1772:	89 2f       	mov	r24, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3010
    1774:	04 d0       	rcall	.+8      	; 0x177e <__popcountqi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3011
    1776:	99 27       	eor	r25, r25

00001778 <__popcounthi2_tail>:
__popcounthi2_tail():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3016
    1778:	0f 90       	pop	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3017
    177a:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3018
    177c:	08 95       	ret

0000177e <__popcountqi2>:
__popcountqi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3057
    177e:	08 2e       	mov	r0, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3058
    1780:	81 70       	andi	r24, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3059
    1782:	06 94       	lsr	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3060
    1784:	06 94       	lsr	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3061
    1786:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3062
    1788:	06 94       	lsr	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3063
    178a:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3064
    178c:	06 94       	lsr	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3065
    178e:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3066
    1790:	06 94       	lsr	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3067
    1792:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3068
    1794:	06 94       	lsr	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3069
    1796:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3070
    1798:	06 94       	lsr	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3071
    179a:	80 1d       	adc	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3072
    179c:	08 95       	ret

0000179e <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    179e:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    17a0:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    17a2:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    17a4:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    17a6:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    17a8:	09 94       	ijmp

000017aa <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    17aa:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    17ac:	c1 e6       	ldi	r28, 0x61	; 97
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    17ae:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    17b0:	03 c0       	rjmp	.+6      	; 0x17b8 <__do_global_dtors+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    17b2:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    17b4:	f4 df       	rcall	.-24     	; 0x179e <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    17b6:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    17b8:	c2 36       	cpi	r28, 0x62	; 98
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    17ba:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    17bc:	d1 f7       	brne	.-12     	; 0x17b2 <__do_global_dtors+0x8>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    17be:	f8 94       	cli

000017c0 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    17c0:	ff cf       	rjmp	.-2      	; 0x17c0 <__stop_program>
